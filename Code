{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div>\n",
    "<table style=\"width: 100%\">\n",
    "\t<tr>\n",
    "\t\t<td>\n",
    "\t\t<table style=\"width: 100%\">\n",
    "\t\t\t<tr>\n",
    "                <td ><center><font size=\"30\">Samikshya Chhetri</font><center>\n",
    "                    <center><font size=\"30\">WSE-HI 1076196</font><center></td>\n",
    "\t\t\t</tr>\n",
    "\t\t\t<tr>\n",
    "                <td><center><font size=\"5\">email: sch009@un-ihe.org</font><center></td>\n",
    "\t\t\t</tr>\n",
    "\t\t\t<tr>\n",
    "                <td><center><font size=\"10\">Python Assignment02</font><center></td>\n",
    "\t\t\t</tr>\n",
    "\t\t</table>\n",
    "\t\t</td>\n",
    "\t\t<td><img src='figures/python_logo.png'></img></td>\n",
    "\t</tr>\n",
    "</table>\n",
    "</div>   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='table'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Notebook guide:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>\n",
    "\n",
    "<a href='#channel1'>Backwater curve for Channel 1</a>\n",
    "\n",
    "<a href='#channel2'>Backwater curve for Channel 2</a>\n",
    "\n",
    "<a href='#O'>Point of bifurcation</a>\n",
    "\n",
    "<a href='#channel3'>Backwater curve for Channel 3</a>\n",
    "\n",
    "<a href='#profile13'>Backwater curve for Channels 1 and 3</a>\n",
    "\n",
    "<a href='#profile23'>Backwater curve for Channels 2 and 3</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BACKWATER CURVE APPLICATION\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='library'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Python Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IMPORT the python libraries: numpy for mathematical calculation, matplotlib to plot graphs, and pandas to plot tables\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='function'></a>\n",
    "\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 1: Create a function to calculate water depth at the most upstream point\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DEFINE a function \"back_water\" which gives the water depth at the last upstream point as output\n",
    "\n",
    "# Part 1: The function statement\n",
    "# WRITE the function statement in the form \"def functionname(arguments): \"\n",
    "def back_water(Q, h0, b, slp , dx, n_steps, C):\n",
    "\n",
    "    \n",
    "    # Part 2: Function description\n",
    "    # DESCRIBE what the function is, how it works, and DESCRIBE its input and output parameters \n",
    "    \n",
    "    '''\n",
    "    The function calculates the water depth at last upstream point.\n",
    "    All of the following input parameters take numerical values as inputs:\n",
    "        Q is discharge with unit m³/s (type- int or float)\n",
    "        h0 is intial water with unit meter (type- int or float)\n",
    "        b is the river width with unit meter (type- int or float)\n",
    "        slp is the slope with no unit (type- int or float)\n",
    "        dx is distance step with unit meter (type- int)\n",
    "        n_steps is the uppermost point at which water depth is to be calculated with no unit (type- int)\n",
    "        C is the Chezy's coefficient with unit m^(1/2)/s (type - int or float)\n",
    "        \n",
    "    Output:\n",
    "        water depth at the last upstream point with unit m.\n",
    "    \n",
    "    Returns:\n",
    "        the function will compute water depth at successive points till the last upstream point, but will only return the last depth\n",
    "        \n",
    "    Example of use:\n",
    "        h = (Q1, 7, 100, 0.0005, 1000, 15, 50)\n",
    "        print (h)\n",
    "        \n",
    "        output: 2.79864\n",
    "    '''\n",
    "    \n",
    "    # Part 3: Validation of inputs\n",
    "    # CHECK if the input values comply with the input type required by the function\n",
    "    \n",
    "    # All the input parameters take only numeric values\n",
    "    if Q < 0 and type(Q) != float and type(Q) != int:\n",
    "        raise TypeError(\"Discharge(Q) should be a non negative number\")\n",
    "        \n",
    "    if type(h0) != float and type(h0) != int:\n",
    "        raise TypeError('Initial river depth(h0) should be a non negative number')\n",
    "        \n",
    "    if  b < 0 and type(b) != float and type(b) != int:\n",
    "        raise TypeError('River width(b) should be a non negative number')\n",
    "    \n",
    "    if slp < 0 and type(slp) != float and type(slp) != int:\n",
    "        raise TypeError('Slope(slp) should be a non negative number')\n",
    "    \n",
    "    if dx < 0 and type(dx) != int:\n",
    "        raise TypeError('Distance step(dx) should be a non negative integer')  \n",
    "        \n",
    "    if n_steps < 0 and type(n_steps) != int:\n",
    "        raise TypeError('Number of distance step(n_steps) should be a non negative integer') \n",
    "    \n",
    "    if C < 0 and type(C) != float and type(C) != int:\n",
    "        raise TypeError('Chezy coefficient should be a non negative number') \n",
    "    \n",
    "    # CHECK if the values in the denominator are 0 or not because when a value is divided by 0, it will give a ZeroDivisionError\n",
    "    if h0 == 0:\n",
    "        raise ZeroDivisionError('initial height(h0) should be different from zero!')\n",
    "        \n",
    "    if b == 0:\n",
    "        raise ZeroDivisionError('River width(b) should be different from zero!')\n",
    "        \n",
    "    if C == 0:\n",
    "        raise ZeroDivisionError('Chezy coefficient(C) should be different from zero!')\n",
    "        \n",
    "             \n",
    "    # Part 4: Calculation\n",
    "    # USE the input parameters in the formula to calculate water depth at specific points\n",
    "    \n",
    "      \n",
    "    # CREATE an empty list to store the calculated depths and ADD the intial height to the list\n",
    "    depth = []\n",
    "    depth.append(h0)\n",
    "    \n",
    "    # CREATE a variable and a list to store the calculated distances\n",
    "    dist = 0\n",
    "    distance = [0] \n",
    "    \n",
    "    # USE a loop to calculate the water depths upto the last point\n",
    "    # The loop will run for n_steps times\n",
    "    for i in range(1, n_steps+1):  \n",
    "        \n",
    "        #Formula to calcualte water depth at the given point using the water dpeth at previous point from the list 'depth'\n",
    "        h = ((( Q **2/ (C**2 * ((depth[i-1])**3) * b **2) ) - slp ) *dx) + depth[i-1]         \n",
    "        \n",
    "        # ADD the calculated height to the list 'depth'\n",
    "        depth.append(h)\n",
    "        \n",
    "        # CALCULATE the new distance and ADD it to the list 'distance'\n",
    "        dist += dx\n",
    "        distance.append(dist)\n",
    "    \n",
    "    # In the return statement, POINT out to the last element of the depth list which lies at the uppermost point  \n",
    "    return depth[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='parameters'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 2: Display the resulting backwater curve for all three channels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Given parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# LOAD the values into respective variables to provide input in the function back_water\n",
    "\n",
    "C = 50                                          # Chezy coefficient, m^(1/2)/s\n",
    "dx = 1000                                       # Distance step, m\n",
    "f = 150                                         # Constant, m²/s                              \n",
    "Q1 = 500                                        # Initial discharge assumed for Channel 1, m³/s\n",
    "Q2 = 500                                        # Initial discharge assumed for Channel 2, m³/s\n",
    "Q3 = 1000                                       # Discharge for Channel 3, m³/s\n",
    "slope1 = 0.0005                                 # Slope for Channel 1, unitless\n",
    "slope2 = 0.0003                                 # Slope for Channel 2, unitless \n",
    "slope3 = 0.0005                                 # Slope for Channel 2, unitless\n",
    "height1 = 7                                     # Height of Channel 1 at river mouth, m\n",
    "height2 = 7                                     # Height of Channel 2 at river mouth, m\n",
    "width1 = 100                                    # River width for Channel 1\n",
    "width2 = 120                                    # River width for Channel 2\n",
    "width3 = 200                                    # River width for Channel 3\n",
    "length1 = 15000                                 # Channel 1 length, m\n",
    "length2 = 25000                                 # Channel 2 length, m\n",
    "length3 = 10000                                 # Channel 3 length, m\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='channel1'></a>\n",
    "\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A) Backwater curve for channel 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Point</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Depth</th>\n",
       "      <th>Geodetical height</th>\n",
       "      <th>Piezometric height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>0.5</td>\n",
       "      <td>6.531500</td>\n",
       "      <td>7.031500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.070275</td>\n",
       "      <td>7.070275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3000</td>\n",
       "      <td>1.5</td>\n",
       "      <td>5.618578</td>\n",
       "      <td>7.118578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.179493</td>\n",
       "      <td>7.179493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>5000</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.757249</td>\n",
       "      <td>7.257249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>6000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.357602</td>\n",
       "      <td>7.357602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7000</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.988176</td>\n",
       "      <td>7.488176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.658500</td>\n",
       "      <td>7.658500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>9000</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.379143</td>\n",
       "      <td>7.879143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>10000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.159156</td>\n",
       "      <td>8.159156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11000</td>\n",
       "      <td>5.5</td>\n",
       "      <td>3.001834</td>\n",
       "      <td>8.501834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>12000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.901262</td>\n",
       "      <td>8.901262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>13000</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2.843685</td>\n",
       "      <td>9.343685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>14000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.813530</td>\n",
       "      <td>9.813530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>15000</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>10.298644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Point  Distance  Depth  Geodetical height  Piezometric height\n",
       "0       0         0    0.0           7.000000            7.000000\n",
       "1       1      1000    0.5           6.531500            7.031500\n",
       "2       2      2000    1.0           6.070275            7.070275\n",
       "3       3      3000    1.5           5.618578            7.118578\n",
       "4       4      4000    2.0           5.179493            7.179493\n",
       "5       5      5000    2.5           4.757249            7.257249\n",
       "6       6      6000    3.0           4.357602            7.357602\n",
       "7       7      7000    3.5           3.988176            7.488176\n",
       "8       8      8000    4.0           3.658500            7.658500\n",
       "9       9      9000    4.5           3.379143            7.879143\n",
       "10     10     10000    5.0           3.159156            8.159156\n",
       "11     11     11000    5.5           3.001834            8.501834\n",
       "12     12     12000    6.0           2.901262            8.901262\n",
       "13     13     13000    6.5           2.843685            9.343685\n",
       "14     14     14000    7.0           2.813530            9.813530\n",
       "15     15     15000    7.5           2.798644           10.298644"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FIND the last point on the upstream region\n",
    "n_steps = length1/ dx\n",
    "\n",
    "# CREATE empty lists to store the values of points, distance, critical, normal and water depth, geodetical and piezometric height\n",
    "points1 = []\n",
    "distance1 = []\n",
    "geodet_ht1 = []\n",
    "critcal_dpth1 = []\n",
    "norml_dpth1 = []\n",
    "wtr_depth1 = []\n",
    "piezo_ht1 = []\n",
    "\n",
    "# CALCULATE the critical depth\n",
    "crit_d1 = ((Q1**2) / (9.81 * width1 **2)) ** (1/3)\n",
    "\n",
    "# CALCULATE the normal depth\n",
    "norm_d1 = ((Q1) / (width1 * C * np.sqrt(slope1))) ** (2/3)\n",
    "\n",
    "# CREATE a loop that calculates distance, normal, critical and water depth, geodetical and piezometric height at each distance step\n",
    "# The point of reference for geodetical height is river mouth\n",
    "# The loop will run for n_steps + 1 number of times\n",
    "for i in range (0,  int(n_steps + 1)):\n",
    "    \n",
    "    # CALCULATE the distance by multiplying point (i) with distance step\n",
    "    dist = dx * i \n",
    "    \n",
    "    # CALCULATE the geodectical heights by mulplying the distance at the point and slope\n",
    "    geo = dist * slope1                                         \n",
    "    \n",
    "    # ADD geodetical height with calulated normal depth to compute the normal depth at a point for an inclined bed\n",
    "    norm = norm_d1 + geo                                        \n",
    "    \n",
    "    # ADD geodetical height with calculated critical depth to compute the critical depth at a point for an inclined bed\n",
    "    crit = crit_d1 + geo                                        \n",
    "    \n",
    "    # CALL the user-defined function 'back_water' to calculate water depth\n",
    "    h1 = back_water(Q1, height1, width1, slope1, dx, i, C)      \n",
    "    \n",
    "    # ADD geodetical height with water depth to get piezometric height\n",
    "    piezo = geo + h1                                       \n",
    "    \n",
    "    # ADD the values to their respective lists\n",
    "    points1.append(i)\n",
    "    distance1.append(dist)\n",
    "    geodet_ht1.append(geo)\n",
    "    critcal_dpth1.append(crit)\n",
    "    norml_dpth1.append(norm)\n",
    "    wtr_depth1.append(h1)\n",
    "    piezo_ht1.append(piezo)\n",
    "    i = i + 1\n",
    "\n",
    "# CREATE a zipped list of points, distance, water depth, geodetical and piezometric height    \n",
    "zipped_list = list(zip (points1, distance1, geodet_ht1,  wtr_depth1, piezo_ht1))    \n",
    "\n",
    "# USE panda library to create a tabluated representation of data from the zipped list\n",
    "data = pd.DataFrame(zipped_list, columns = ['Point', 'Distance', 'Depth','Geodetical height', 'Piezometric height'])\n",
    "\n",
    "# DISPLAY the table\n",
    "display(data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='channel2'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B)  Backwater curve for channel 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Point</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Depth</th>\n",
       "      <th>Geodetical height</th>\n",
       "      <th>Piezometric height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>0.3</td>\n",
       "      <td>6.720246</td>\n",
       "      <td>7.020246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2000</td>\n",
       "      <td>0.6</td>\n",
       "      <td>6.443128</td>\n",
       "      <td>7.043128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.9</td>\n",
       "      <td>6.169090</td>\n",
       "      <td>7.069090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5.898668</td>\n",
       "      <td>7.098668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.5</td>\n",
       "      <td>5.632504</td>\n",
       "      <td>7.132504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>6000</td>\n",
       "      <td>1.8</td>\n",
       "      <td>5.371367</td>\n",
       "      <td>7.171367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7000</td>\n",
       "      <td>2.1</td>\n",
       "      <td>5.116178</td>\n",
       "      <td>7.216178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8000</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4.868034</td>\n",
       "      <td>7.268034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>9000</td>\n",
       "      <td>2.7</td>\n",
       "      <td>4.628231</td>\n",
       "      <td>7.328231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>10000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.398279</td>\n",
       "      <td>7.398279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11000</td>\n",
       "      <td>3.3</td>\n",
       "      <td>4.179897</td>\n",
       "      <td>7.479897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>12000</td>\n",
       "      <td>3.6</td>\n",
       "      <td>3.974989</td>\n",
       "      <td>7.574989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>13000</td>\n",
       "      <td>3.9</td>\n",
       "      <td>3.785557</td>\n",
       "      <td>7.685557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>14000</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3.613568</td>\n",
       "      <td>7.813568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>15000</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.460741</td>\n",
       "      <td>7.960741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>16000</td>\n",
       "      <td>4.8</td>\n",
       "      <td>3.328286</td>\n",
       "      <td>8.128286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>17000</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.216640</td>\n",
       "      <td>8.316640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>18000</td>\n",
       "      <td>5.4</td>\n",
       "      <td>3.125296</td>\n",
       "      <td>8.525296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>5.7</td>\n",
       "      <td>3.052787</td>\n",
       "      <td>8.752787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>20000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.996876</td>\n",
       "      <td>8.996876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>21000</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.954883</td>\n",
       "      <td>9.254883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>22000</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.924046</td>\n",
       "      <td>9.524046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>23000</td>\n",
       "      <td>6.9</td>\n",
       "      <td>2.901816</td>\n",
       "      <td>9.801816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>24000</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2.886019</td>\n",
       "      <td>10.086019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>25000</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2.874914</td>\n",
       "      <td>10.374914</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Point  Distance  Depth  Geodetical height  Piezometric height\n",
       "0       0         0    0.0           7.000000            7.000000\n",
       "1       1      1000    0.3           6.720246            7.020246\n",
       "2       2      2000    0.6           6.443128            7.043128\n",
       "3       3      3000    0.9           6.169090            7.069090\n",
       "4       4      4000    1.2           5.898668            7.098668\n",
       "5       5      5000    1.5           5.632504            7.132504\n",
       "6       6      6000    1.8           5.371367            7.171367\n",
       "7       7      7000    2.1           5.116178            7.216178\n",
       "8       8      8000    2.4           4.868034            7.268034\n",
       "9       9      9000    2.7           4.628231            7.328231\n",
       "10     10     10000    3.0           4.398279            7.398279\n",
       "11     11     11000    3.3           4.179897            7.479897\n",
       "12     12     12000    3.6           3.974989            7.574989\n",
       "13     13     13000    3.9           3.785557            7.685557\n",
       "14     14     14000    4.2           3.613568            7.813568\n",
       "15     15     15000    4.5           3.460741            7.960741\n",
       "16     16     16000    4.8           3.328286            8.128286\n",
       "17     17     17000    5.1           3.216640            8.316640\n",
       "18     18     18000    5.4           3.125296            8.525296\n",
       "19     19     19000    5.7           3.052787            8.752787\n",
       "20     20     20000    6.0           2.996876            8.996876\n",
       "21     21     21000    6.3           2.954883            9.254883\n",
       "22     22     22000    6.6           2.924046            9.524046\n",
       "23     23     23000    6.9           2.901816            9.801816\n",
       "24     24     24000    7.2           2.886019           10.086019\n",
       "25     25     25000    7.5           2.874914           10.374914"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FIND the last point on the upstream region\n",
    "n_steps = length2/ dx\n",
    "\n",
    "# CREATE empty lists to store the values of points, distance, critical, normal, and water depth, geodetical and piezometric height\n",
    "points2 = []\n",
    "distance2 = []\n",
    "geodet_ht2 = []\n",
    "critcal_dpth2 = []\n",
    "norml_dpth2 = []\n",
    "wtr_depth2 = []\n",
    "piezo_ht2 = []\n",
    "\n",
    "# CALCULATE the critical depth\n",
    "crit_d2 = ((Q2 **2) / (9.81 * width2 **2)) ** (1/3)\n",
    "\n",
    "# CALCULATE the normal depth\n",
    "norm_d2 = ((Q2) / (width2 * C * np.sqrt(slope2))) ** (2/3)\n",
    "\n",
    "# CREATE a loop that calculates distance, normal, critical, and water depth, geodetical and piezometric height at each distance step\n",
    "# The point of reference for geodetical height is river mouth\n",
    "# The loop will run for n_steps + 1 number of times\n",
    "for i in range (0,  int(n_steps + 1)):\n",
    "    \n",
    "    # CALCULATE the distance by multiplying point (i) with distance step\n",
    "    dist = dx * i \n",
    "    \n",
    "    # CALCULATE the geodectical heights by mulplying the distance at the point and slope\n",
    "    geo = dist * slope2                                         \n",
    "    \n",
    "    # ADD geodetical height with calulated normal depth to compute the normal depth at a point for an inclined bed\n",
    "    norm = norm_d2 + geo                                        \n",
    "    \n",
    "    # ADD geodetical height with calculated critical depth to compute the critical depth at a point for an inclined bed\n",
    "    crit = crit_d2 + geo                                        \n",
    "    \n",
    "    # CALL the user-defined function 'back_water' to calculate water depth\n",
    "    h2 = back_water(Q2, height2, width2, slope2, dx, i, C)      \n",
    "    \n",
    "    # ADD geodetical height with water depth to get piezometric height\n",
    "    piezo = geo + h2        \n",
    "    \n",
    "    # ADD the values to their respective lists\n",
    "    points2.append(i)\n",
    "    distance2.append(dist)\n",
    "    geodet_ht2.append(geo)\n",
    "    critcal_dpth2.append(crit)\n",
    "    norml_dpth2.append(norm)\n",
    "    wtr_depth2.append(h2)\n",
    "    piezo_ht2.append(piezo)\n",
    "    i = i + 1\n",
    "\n",
    "# CREATE a zipped list of points, distance, water depth, geodetical, and piezometric height    \n",
    "zipped_list = list(zip (points2, distance2, geodet_ht2,  wtr_depth2, piezo_ht2))    \n",
    "\n",
    "# USE panda library to create a tabluated representation of data from the zipped list\n",
    "data = pd.DataFrame(zipped_list, columns = ['Point', 'Distance', 'Depth','Geodetical height', 'Piezometric height'])\n",
    "\n",
    "# DISPLAY the table\n",
    "display(data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='O'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  C)  Find the point of bifurcation 'O'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Therefore, the height at point of bifuration O is 2.7986443311439206 m\n",
      "At O, the discharge for channel 1 and 2 are:519.7199726396824 cubic m³/s and 480.2800273603176 m³/s \n"
     ]
    }
   ],
   "source": [
    "# CALL the user defined function 'back_water' to calculate water depth at the uppermost point for Channels 1 and 2\n",
    "h_a = back_water(Q1, height1, width1, slope1, dx, round(length1/dx), C)\n",
    "h_b = back_water(Q2, height2, width2, slope2, dx, round(length2/dx), C)\n",
    "\n",
    "# CALCULATE the difference between the heights for upper most point of both channels\n",
    "diff = np.abs(h_a - h_b)\n",
    "\n",
    "# CREATE a loop to find the depth of two channels for which the difference is less than 0.001m\n",
    "while diff >= 0.001:\n",
    "    dQ = (-f) * (h_a - h_b)\n",
    "    Q1 = Q1 + dQ\n",
    "    Q2 = Q3 - Q1\n",
    "    \n",
    "    # FIND the water depths at uppermost point for both channels and compute their differnce\n",
    "    h_a = back_water(Q1, height1, width1, slope1, dx, round(length1/dx), C)\n",
    "    h_b = back_water(Q2, height2, width2, slope2, dx, round(length2/dx), C)\n",
    "    diff = np.abs(h_a - h_b)\n",
    "\n",
    "# DISPLAY the values obtained for point of bifurcation\n",
    "print (\"Therefore, the height at point of bifuration O is {0} m\".format(h_a))\n",
    "print (\"At O, the discharge for channel 1 and 2 are:{0} cubic m³/s and {1} m³/s \".format(Q1, Q2))\n",
    "\n",
    "# STORE the resultant height from either of the channels as the height for Channel 3 at that point\n",
    "height3 = h_a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='channel3'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### D) Backwater curve for channel 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>\n",
    "\n",
    "<a href='#O'>Point of bifurcaiton 'O'</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Point</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Depth</th>\n",
       "      <th>Geodetical height</th>\n",
       "      <th>Piezometric height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>2.798644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>3.254846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>3.733154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3000</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>4.222942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>4.718261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>5000</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>5.216143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>6000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>5.715191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7000</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>6.214764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>6.714573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>9000</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>7.214487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>10000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.798644</td>\n",
       "      <td>7.714449</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Point  Distance  Depth  Geodetical height  Piezometric height\n",
       "0       0         0    0.0           2.798644            2.798644\n",
       "1       1      1000    0.5           2.798644            3.254846\n",
       "2       2      2000    1.0           2.798644            3.733154\n",
       "3       3      3000    1.5           2.798644            4.222942\n",
       "4       4      4000    2.0           2.798644            4.718261\n",
       "5       5      5000    2.5           2.798644            5.216143\n",
       "6       6      6000    3.0           2.798644            5.715191\n",
       "7       7      7000    3.5           2.798644            6.214764\n",
       "8       8      8000    4.0           2.798644            6.714573\n",
       "9       9      9000    4.5           2.798644            7.214487\n",
       "10     10     10000    5.0           2.798644            7.714449"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FIND the last point on the upstream region\n",
    "n_steps = length3/ dx\n",
    "\n",
    "\n",
    "# CREATE empty lists to store the values of points, distance, critical, normal, and water depth, geodetical and piezometric height\n",
    "points3 = []\n",
    "distance3 = []\n",
    "geodet_ht3 = []\n",
    "critcal_dpth3 = []\n",
    "norml_dpth3 = []\n",
    "wtr_depth3 = []\n",
    "piezo_ht3 = []\n",
    "\n",
    "# CALCULATE the critical depth\n",
    "crit_d3 = ((Q3**2) / (9.81 * width3 **2)) ** (1/3)\n",
    "\n",
    "# CALCULATE the normal depth\n",
    "norm_d3 = ((Q3) / (width3 * C * np.sqrt(slope3))) ** (2/3)\n",
    "\n",
    "# CREATE a loop that calculates distance, normal, critical, and water depth, geodetical and piezometric height at each distance step\n",
    "# The point of reference for geodetical height is point of bifurcation 'O'\n",
    "# The loop will run for n_steps + 1 number of times\n",
    "for i in range (0,  int(n_steps + 1)):\n",
    "    \n",
    "    # CALCULATE the distance by multiplying point (i) with distance step\n",
    "    dist = dx * i \n",
    "    \n",
    "    # CALCULATE the geodectical heights by mulplying the distance at the point and slope\n",
    "    geo = dist * slope3                                         \n",
    "    \n",
    "    # ADD geodetical height with calulated normal depth to compute the normal depth at a point for an inclined bed\n",
    "    norm = norm_d3 + geo                                        \n",
    "    \n",
    "    # ADD geodetical height with calculated critical depth to compute the critical depth at a point for an inclined bed\n",
    "    crit = crit_d3 + geo                                        \n",
    "    \n",
    "    # CALL the user-defined function back_water to calculate water depth\n",
    "    h3 = back_water(Q3, height3, width3, slope3, dx, i, C)      \n",
    "    \n",
    "    # Piezometric height is the sum of geodetical height with water depth\n",
    "    piezo = geo + h3        \n",
    "       \n",
    "    # ADD the values to their respective lists\n",
    "    points3.append(i)\n",
    "    distance3.append(dist)\n",
    "    geodet_ht3.append(geo)\n",
    "    critcal_dpth3.append(crit)\n",
    "    norml_dpth3.append(norm)\n",
    "    wtr_depth3.append(height3)\n",
    "    piezo_ht3.append(piezo)\n",
    "    i = i + 1\n",
    "\n",
    "# CREATE a zipped list of points, distance, water depth, geodetical and piezometric height \n",
    "zipped_list = list(zip (points3, distance3, geodet_ht3,  wtr_depth3, piezo_ht3))    \n",
    "\n",
    "# USE panda library to create a tabluated representation of data from the zipped list\n",
    "data = pd.DataFrame(zipped_list, columns = ['Point', 'Distance', 'Depth','Geodetical height', 'Piezometric height']) \n",
    "\n",
    "# DISPLAY the values\n",
    "display(data)\n",
    "\n",
    "# To store the values in a file\n",
    "# OPEN the file in write mode\n",
    "f = open ('SE-BWF.OUT', 'w')\n",
    "\n",
    "# GIVE a title to the data\n",
    "f.writelines(\"\\n              THIS IS THE OUTPUT OF BACKWATERCURVE FOR CHANNEL 3 \\n\\n\")\n",
    "\n",
    "# DEFINE the rows containing title of each column\n",
    "names = [ 'Point           Distance         Depth    Geodetical height  Piezometric height']\n",
    "\n",
    "# LOAD the data to the file based on their delimiter\n",
    "np.savetxt(f, names, fmt='%r', delimiter='    ')\n",
    "np.savetxt(f, data,  fmt='%f', delimiter='\\t')\n",
    "\n",
    "# CLOSE the file immediately after completing the tasks to allow other programs to use it when needed\n",
    "f.close()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='profile13'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 2: Plot the entire profiles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A) Plot entire profile of rivers 1 and 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>\n",
    "\n",
    "<a href='#channel 1'>Backwater Curve for Channel 1</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJAAAAJDCAYAAABUqu6SAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3iUVfrG8e9Mei+QhN5DbyItiKkURQGlh87qrnVdlbWLfcXyW3fVteuuohJ6kSKImYTeIYAU6UVaIAFCQupkfn+8MGlDJAgZyv25Lq7dec+ZN88QEjN3znmOyWaz2RAREREREREREbkIs7MLEBERERERERGRa5sCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBERERERERERKZcCJBEREQe+/vprTCZTiT8hISFER0czd+7cq/qxo6Ojadmy5VX9GL/n3LlzvPLKKyQnJ1fqxy39dx4QEEB0dDTz5s274h/rww8/pFGjRri7u2MymTh9+jSjR4+mXr16JebVq1eP0aNHX9GP/eKLL1KnTh1cXV0JDAy8ove+mKVLlzJo0CBq1qyJu7s7AQEBdOnShU8++YSsrCz7PJPJxKOPPlopNVWGS/38zZ07l5EjR9KqVSvc3NwwmUxXv7jLcOF70/79+8ud9/PPP9O9e3dq1KiBh4cHoaGhxMbGMn/+/MopVEREbjgKkERERMrxv//9j5UrV7JixQo+//xzXFxc6N27N3PmzHF2aVfVuXPnePXVVys9QAIYMGAAK1euZPny5Xz00UccO3aM3r17X9EQKSUlhccee4yYmBgsFgsrV67Ez8+PcePGMXPmzCv2cRyZPXs2//jHPxg5ciSLFy/m559/vqofD+Dll18mMjKSw4cP8/rrr7No0SImTZpEXFwcr7zyCi+++OJVr+FaN3PmTFatWkXz5s1p06aNs8v5w9LS0mjRogX/+te/+Omnn/jss89wc3Pjrrvu4rvvvnN2eSIich1ydXYBIiIi17KWLVvSvn17++M77riDoKAgEhIS6N27txMruz7l5+djMplwdb34jyBhYWF07twZgC5duhAREUGjRo3497//zV133XXZ9y1u69atAPz5z3+mY8eO9usNGza81Jdy2X755RcAHnvsMUJDQ6/IPc+dO4e3t7fDsalTp/Laa69x33338cUXX5RYWXPnnXfy9NNPs3LlyitSx/Xsiy++wGw2frf66KOPsn79eidX9McMHjyYwYMHl7h29913U79+fT7//HOGDx/upMpEROR6pRVIIiIiFeDp6Ym7uztubm4lrr/66qt06tSJ4OBg/P39adeuHV999RU2m63MPSZOnEhERAS+vr74+vrStm1bvvrqq3I/7syZM/H29ub++++noKCAgQMH0qJFixJzevfujclkYurUqfZrGzZswGQy2VdMnThxgocffpjmzZvj6+tr39aydOlS+3P2799PSEiI/XVd2E5WfBvQrl27GDp0KKGhoXh4eNCsWTM++uijEvUkJydjMpn49ttvGTt2LDVr1sTDw4Pdu3eX+1pLa9iwISEhIRw4cOCS7vvf//6XNm3a4OnpSXBwMPfeey/bt2+33y86Otr+5rlTp04lXpujLWyOZGRk8Pe//5369evj7u5OzZo1efzxx0tsBXOkXr169tU+YWFhmEwmXnnlFQAKCwt55513aNq0qX3L0ciRI/ntt99K3OPCFsclS5bQpUsXvL29+dOf/nTRj/naa68RFBTEBx984HBblp+fHz169Chz/dtvv6VZs2Z4e3vTpk2bMls3d+/ezZgxYwgPD8fb25uaNWvSu3dvtmzZUmLehc9XQkICL7zwAjVq1MDf359u3brx66+/Onxta9eu5fbbb8fb25sGDRrw1ltvUVhYWGLu5X4OLuZCeHS5LvV7QL169bj77rtZsGAB7dq1w8vLi6ZNm/Lf//63zD1XrVrFbbfdhqenJzVq1OC5554jPz//smt0c3MjMDDwkoNWERGR4vRfDxERkXJYrVYKCgqw2WwcP36cd999l6ysLIYOHVpi3v79+3nggQeoU6cOYLzx++tf/8rhw4d56aWX7PNeeuklXn/9dfr168fYsWMJCAjgl19+sYcjjvzrX//iqaeeKrHVqFu3bkybNo2jR49SvXp1CgoKWLx4MV5eXixatIiBAwcCRh8UV1dXoqOjAUhPTweMLU3VqlUjMzOTmTNnEh0dTWJiItHR0VSvXp0FCxZwxx13cN9993H//fcD2EOlbdu20aVLF+rUqcM///lPqlWrxsKFC3nsscc4efIkL7/8con6n3vuOSIiIvj0008xm80VXnVz6tQp0tLSCA8P/937jh8/nueff574+HjGjx9PWloar7zyChEREaxdu5bw8HA+/vhjEhISeOONN/jf//5H06ZN7a/tUpw7d46oqCh+++03nn/+eVq3bs3WrVt56aWX2LJlCz///PNF++fMnDmTjz76iK+++ooFCxYQEBBArVq1AHjooYf4/PPPefTRR7n77rvZv38/48aNIzk5mQ0bNlC1alX7fY4ePcrw4cN5+umnefPNNy8afhw9epRffvmFwYMHX3SFkiPz5s1j7dq1vPbaa/j6+vLOO+9w77338uuvv9KgQQMAjhw5QpUqVXjrrbcICQkhPT2db775hk6dOrFx40aaNGlS4p7PP/88t912G19++SUZGRk888wz9O7dm+3bt+Pi4mKfd+zYMYYNG8bYsWN5+eWXmTlzJs899xw1atRg5MiRf/hzcLVc6vcAgE2bNjF27FieffZZwsLC+PLLL7nvvvto1KgRkZGRgPF1FhcXR7169fj666/x9vbm448/ZuLEiRWqq7CwkMLCQlJTU/nss8/YuXMnb7/99pV50SIicnOxiYiISBn/+9//bECZPx4eHraPP/643OdarVZbfn6+7bXXXrNVqVLFVlhYaLPZbLa9e/faXFxcbMOGDSv3+VFRUbYWLVrYrFar7dFHH7W5u7vbvvvuuxJzdu/ebQNsEyZMsNlsNtuyZctsgO3pp5+21a9f3z6ve/futi5dulz0YxUUFNjy8/NtcXFxtnvvvdd+/cSJEzbA9vLLL5d5Ts+ePW21atWynTlzpsT1Rx991Obp6WlLT0+32Ww2W1JSkg2wRUZGlvt6iwNsDz/8sC0/P9+Wl5dn2759u+3OO++0AbaPPvqo3PueOnXK5uXlZevVq1eJ6wcPHrR5eHjYhg4dar924fO7du3aEnNHjRplq1u3bolrdevWtY0aNcr+ePz48Taz2VzmudOmTbMBtvnz55f7Gl9++WUbYDtx4oT92vbt2+2vvbjVq1fbANvzzz9vvxYVFWUDbImJieV+HJvNZlu1apUNsD377LO/O/cCwBYWFmbLyMiwXzt27JjNbDbbxo8ff9HnFRQU2PLy8mzh4eG2J554wn79wuer9OdlypQpNsC2cuXKMq9t9erVJeY2b97c1rNnT/vjinwOSn/+LsUjjzxi+yM/Jl/se8CFejw9PW0HDhywX8vOzrYFBwfbHnjgAfu1wYMH27y8vGzHjh2zXysoKLA1bdrUBtj27dt3SbX07NnT/v3L39/fNmPGjMt+XSIicnPTFjYREZFyTJgwgbVr17J27Vp+/PFHRo0axSOPPMJ//vOfEvMsFgvdunUjICAAFxcX3NzceOmll0hLSyM1NRWARYsWYbVaeeSRR3734+bk5HDPPffw/fff89NPPzFs2LAS4w0bNqRevXr2BsyLFi2iVatWDB8+nH379rFnzx5yc3NZtmwZ3bp1K/HcTz/9lHbt2uHp6Ymrqytubm4kJiaW2OZVXl2JiYnce++9eHt7U1BQYP/Tq1cvcnJyWLVqVYnn9O/f/3fvW9zHH3+Mm5sb7u7uNGvWjBUrVvDaa6/x8MMPl3vflStXkp2dXebErdq1axMbG0tiYmKF6riYuXPn0rJlS9q2bVvi9ffs2ROTyXRZjceTkpIAytTesWNHmjVrVqb2oKAgYmNjL/cl/K6YmBj8/Pzsj8PCwggNDS2xUq6goIA333yT5s2b4+7ujqurK+7u7uzatcvhv6U+ffqUeNy6dWuAMqvvqlWrVqIv1YW5xeddjc/BH3Up3wMuaNu2rX2lEhhbYxs3blziNSYlJREXF0dYWJj9mouLS5m+Rr/nww8/ZM2aNcyePZuePXsyePBgEhISLvNViojIzUxb2ERERMrRrFmzMk20Dxw4wNNPP83w4cMJDAxkzZo19OjRg+joaL744gtq1aqFu7s7s2bN4h//+AfZ2dmA0X8IsG9ZKk9qaiqHDh2iW7dudOnSxeGcuLg4FixYABQd2d2qVSvCwsL4+eefCQ8PJzs7u0SA9N577zF27FgefPBBXn/9dapWrYqLiwvjxo27pAApLS2NgoICPvzwQz788EOHc06ePFnicfXq1X/3vsUNGjSIp556CpPJhJ+fHw0bNiyxxeli901LS7vox6tRowaLFi2qUB0Xc/z4cXbv3l2mD9YFpV//pfi92kuHLJf6d3ohpNi3b1+F6qlSpUqZax4eHvZ/ywBPPvkkH330Ec888wxRUVEEBQVhNpu5//77S8y72D09PDwAysy9lI99NT4Hf8Slfg+44FJeY1paGtWqVSszz9G18hTf+tmnTx/uvPNOHnnkEQYPHvyH+z6JiMjNRQGSiIhIBbVu3ZqFCxeyc+dOOnbsyKRJk3Bzc2Pu3Ll4enra582aNavE8y702fntt9+oXbt2uR+jTp06vPfee9x7773069ePqVOnlrg3GAHSV199xZo1a1i9erW9P1JsbCyLFi3iwIED+Pr62k80A/juu++Ijo7mk08+KXGvs2fPXtJrDwoKwsXFhREjRlx0JVX9+vVLPK5oL5qQkJASod3FlL7vhTflR48eLTP3yJEjJXoI/RFVq1bFy8vLYdPjC+MVVbz20gGjo9ov9e+0evXqtGrVip9++qnck9oux3fffcfIkSN58803S1w/efIkgYGBV+zjOHI1Pgd/xKV+D6iIKlWqcOzYsTLXHV2riI4dO7JgwQJOnDhRYnWTiIjI79GvHURERCooJSUFKAqELhwfX3yVTHZ2Nt9++22J5/Xo0QMXF5cy4c3F9OjRg4ULF7JkyRLuvvvuMqdLxcXFYTKZGDduHGaz2d58t1u3biQlJbFo0SIiIyNLrNIwmUz2lR8XbN68ucwx7hdbHeLt7U1MTAwbN26kdevWtG/fvswfR6srKkNERAReXl589913Ja7/9ttvWCwW4uLirsjHufvuu9mzZw9VqlRx+Pov5RS30i5sRytd+9q1a9m+ffsfqn3cuHGcOnWKxx57zOGpgJmZmfz0008Vvq+jf0vz5s3j8OHDl13rpboan4M/4lK/B1RETEwMiYmJHD9+3H7NarUyefLky76nzWZj8eLFBAYGOu3rVERErl9agSQiIlKOX375hYKCAsDYUjJjxgwWLVrEvffea19pc9ddd/Hee+8xdOhQ/vKXv5CWlsb//d//lXlzXa9ePZ5//nlef/11srOziY+PJyAggG3btnHy5EleffXVMh+/a9euJCYmcscdd9CjRw/mz59PQEAAAKGhobRs2ZKffvqJmJgY++qSbt26kZ6eTnp6Ou+9916J+9199928/vrrvPzyy0RFRfHrr7/y2muvUb9+ffvrBONo97p16zJ79mzi4uIIDg6matWq1KtXj/fff5+uXbty++2389BDD1GvXj3Onj3L7t27mTNnDhaL5cp9AiogMDCQcePG8fzzzzNy5Eji4+NJS0vj1VdfxdPTs8zpcJfr8ccfZ/r06URGRvLEE0/QunVrCgsLOXjwID/99BNjx46lU6dOFbpnkyZN+Mtf/sKHH36I2WzmzjvvtJ/CVrt2bZ544onLrnfgwIGMGzeO119/nR07dnDffffRsGFDzp07x+rVq/nss88YPHgwPXr0qNB97777br7++muaNm1K69atWb9+Pe++++4lbdH8o67G5+DAgQOsXbsWgD179gAwbdo0wPjaLW9V3KV+D6iIF198kR9++IHY2FheeuklvL29+eijj8oEyRfTt29f2rRpQ9u2balSpQpHjhzh66+/ZvHixXz00Ue4uuptgIiIVIz+yyEiIlKOMWPG2P9/QEAA9evX57333ivR0Dk2Npb//ve/vP322/Tu3ZuaNWvy5z//mdDQUO67774S93vttdcIDw/nww8/ZNiwYbi6uhIeHs5jjz120Rrat2/P4sWL6datG7GxsSxcuNC+Radbt25s2bKlRJ+jOnXqEB4ezq5du8o00H7hhRc4d+4cX331Fe+88w7Nmzfn008/ZebMmWUaD3/11Vc89dRT9OnTh9zcXEaNGsXXX39N8+bN2bBhA6+//jovvvgiqampBAYGEh4eTq9evSr8d3wlPffcc4SGhvLBBx8wefJkvLy8iI6O5s033yzRC+aP8PHxYenSpbz11lt8/vnn7Nu3Dy8vL+rUqUO3bt0ue/XLJ598QsOGDfnqq6/46KOPCAgI4I477mD8+PF/eLXIa6+9Rrdu3fjwww954YUXOHnyJF5eXrRo0YInn3ySBx54oML3fP/993Fzc2P8+PFkZmbSrl07ZsyYYd9KeTVdjc9BUlJSia93MMI3wP5v/2Iq8j3gUrVs2ZKff/6ZsWPHMmrUKIKCghgxYgT9+/fnL3/5y+8+/7bbbmPatGn85z//ISMjg8DAQNq3b8/cuXO56667LqsmERG5uZlsjtYyi4iIiIiIiIiInKceSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUi4FSCIiIiIiIiIiUq7rOkBasmQJvXv3pkaNGphMJmbNmlVmzvbt2+nTpw8BAQH4+fnRuXNnDh48WPnFioiIiIiIiIhcp67rACkrK4s2bdrwn//8x+H4nj176Nq1K02bNiU5OZlNmzYxbtw4PD09K7lSEREREREREZHrl8lms9mcXcSVYDKZmDlzJvfcc4/92pAhQ3Bzc+Pbb7+97PsWFhZy5MgR/Pz8MJlMV6BSERERERERERHns9lsnD17lho1amA2l7/GyLWSaqp0hYWFzJs3j6effpqePXuyceNG6tevz3PPPVciZCotNzeX3Nxc++PDhw/TvHnzSqhYRERERERERKTyHTp0iFq1apU754YNkFJTU8nMzOStt97ijTfe4O2332bBggX069ePpKQkoqKiHD5v/PjxvPrqq2WuHzp0CH9//6tdtoiIiIiIiIhIpcjIyKB27dr4+fn97twbdgvbkSNHqFmzJvHx8UycONE+r0+fPvj4+JCQkODwPqVXIF34yzxz5owCJBERERERERG5YWRkZBAQEHBJmccNuwKpatWquLq6ltl+1qxZM5YtW3bR53l4eODh4XG1yxMRERERERERuW5c16ewlcfd3Z0OHTrw66+/lri+c+dO6tat66SqRERERERERESuP9f1CqTMzEx2795tf7xv3z5SUlIIDg6mTp06PPXUUwwePJjIyEhiYmJYsGABc+bMITk52XlFi4iIiIiIiIhcZ67rHkjJycnExMSUuT5q1Ci+/vprAP773/8yfvx4fvvtN5o0acKrr75K3759L/ljVGQ/oIiIiIiIiIjI9aIimcd1HSBVBgVIIiIiIiIiInIjqkjmccP2QBIRERERERERkStDAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIiJRLAZKIiIiIiIiIyGU4etTZFVQeBUgiIiIiIiIiIpfo4EF45x245RaoXx/OnHF2RZXD1dkFiIiIiIiIiIhcy1JTYepUSEiA5ctLjk2fYeNPY0zOKawSKUASERERERERESnlzBmYOdMIjRITwWp1MKlpBjZfL8CtssurdAqQRERERERERESA7GyYO9cIjebPh9xcB5PqZkFcKsSmQs1s7oiIqPQ6nUEBkoiI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b7zBnqQkljzwAPd+8gkxp06RExLCTfv2uaauaN+e9W3aKDyySmkprFwJzz0H48bBr38Nixe7hUe+jRox8O67+XzlSs7s3Ml/n39e4ZGISA0JDw93C4q2bdvGN998Q2pqqtv1Dz/8kKNHj7rCjKeffpqOHTsSFBREgwYNmDlzJiXl/7eXlJTg5+fHsmXLeOKJJ7DZbPTq1QuAAwcOMHXqVCIiIoiIiCApKYmcnBzXx9m7dy82m43333+fAQMG4O/vz2233UZQUBDvvPMOffr0oUWLFvTv35+XX36ZNm3aAPDll18SGBhIaWmp676+++47bDYbx48fv+B9f/TRR7Rq1YonnniClStXYrPZSE5O/tHHCJCdnc1dd91FgwYNCAwMpHPnzixatMg1Xt1j3bFjB/n5+QwYMICGDRu6vZ0LkA4cOMCJEyfc2vD82OcvJiaGv/3tb25f49WrV+Pv78+uXbuqfVzVfd3Ofe72Vfgea/PmzQwbNozQ0FAaNmzII488QnF5y4CdO3dis9n4v//7PxISEqhXrx433ngjK1eurPof4hX0k7qOrl69mvfee4/9+/e7HsQ5H3744RUpTERErnPOYshZD5E93QOG+gMgd6P598CmZk+jaDsENbemTnGT9O23/O9zz7lu59Wrx0f9+pGWkEB6166U+qhhuaWcTti0yWyEvXAhVPgB5ByvyEi6jRzJQ9OnkxgfX+XhJyIicvWFhYWRl5fnuv3iiy8yefJk2rVrx9dff+12ffr06dSvXx/DMCgrK+ONN96gSZMmbN26lenTp9OpUydmzpyJt7c3S5YsoVevXmRlZdGgQQMCAgLYuXMnffv25e6772b58uWcOXOGe+65h0cffdQVemRlZQHw+9//nueee464uDieffZZvvjiC/bv30+LC2xpzsrKon379vhU+B4gKyuLJk2aUL9+/Qved3R0NAMHDqRPnz7MnDmTadOmERQU9KOPcd++ffTu3Zt+/frxySefEBUVxcKFCwkJCQH40ce6du1afHx86NSp0wW/NllZWYSEhNCyZcuLuk+ADh06sGXLFrf7+dWvfsVdd91Fq1atqn1cv/jFL6r8up2rJTw8nObNze+F169fz8CBA3nggQd49dVXOXjwIImJiYSHhzN37lw2bNiAzWbjhRdeYO7cuTRt2pR77rmHOXPmuHaOXS2X/F3gggULmD59OkOGDOGbb75hyJAh7NixgyNHjjB27NirUaOIiFwvjDJzW9oxh7lNrfQ03PwahFZY8RATD0XHzOAoWKtXrNQkO5vJGRnsa9CADwYOBODLnj3Jq1ePr7t3J81u5/PevSm8Dvbk12qGAdu3m6FRRgZkZ3tMsQUH0+6227h72jR+MXw4vr6+FhQqIlIzuneHI0dq/uM2bAhr1lz8/IorkLKzs3nrrbdYsWIF69evd11fsWIFK1eu5J///CdgHlr1m9/8xnUfzZs3Z/DgwWzbZvaK9PLy4tChQ0RFRdG5c2fXvAkTJjBz5ky3933sscd49NFHXbc3bNhAUFAQ7733nissuv/++3E4HLRs2ZKuXbty6623Mn36dNpVWK26YcMGjwOz1q9f7/bxq7pvgLNnz7J371769etHw4bnT9it7jHOnDmTtm3b8u6777p+CXLDDTe45t99993VPtZ169ZRVlZGVFSUW82JiYm8+eabgBnadO7c2XX/P3afAB07dmTr1q2u219//TUrV650Nb6u7mt3oa/buc9dxWt33nknycnJPPPMMwC0bt2aO++8k//+97+uACksLIx33nmH6OhoAMaMGcPrr7/O1XbJAdJzzz3HSy+9xL333ktISAivvPIKcXFx/OIXv6BRo0ZXo0YREbmWGQbkf2c2ws7ONE9Kq+hYunuA5BcJrWbWaIlyXlRuLhMWLiQxPZ3+mzbhZRgsbd/eFSCdDAsj5qOPKKpwWIZYZP9+s6dRRgYcOOA57u9PS7udGUlJzJowgXoX2TdDROR6d+QIHDxodRU/ruIKpNdee41+/frRqVMndu3a5QqQXnjhBUaOHMmNN94IwL59+3j++efJzMzk4MGDlJSUUFhY6NZwu3J4s2/fPtLT01m2bBkvvPCC63pZWRmxsbGu21lZWYwaNcot4OnatSu7d+9myZIlfPPNN7z77ru88MILvPvuu64FIllZWR69grKysujevXu19w2wcaO56rxiM+7qHuP+/fv54osvWLduXZUraC/msa5du5aJEyfy7LPPur1vRHkPx3P1ngvFLvbz16FDBz744APA7LP0+OOP8+ijjxJTfoLpj33tKn/dKtZy7vq2bdtYu3Ytb731ltscPz8/ioqKADNwGjlypCs8Ati9ezetW7f2uO8r7ZIDpF27drmaPvn7+3PmzBlsNhsPP/wwdrvdLXETEZFa7MweOPqteYpa4WHPce9AiOpnvonlJjscTP/6awavWYNvWZnr+qJOnUiz280gsPwbNYVHFjp61AyM0tNh507PcW9vGvfrR+KUKfwqMZGoGjjJRkTkWlNhIcs1/XHDw8MpLS3l5MmTvP766/znP/8BIDQ0lNzcXPbu3ctHH32Ew+EA4Pjx4/Ts2ZP4+HhefPFFmjRpgtPppHv37m4rgCoGDmAGCpGRkVX2wAkMDHSbN2fOHI853t7eDBw4kIEDB/LUU0/RokUL3n77bcaOHUtBQQE7duxw+/hOp5N169Zxxx13/Oh9Z2Vl0bp1a4KCgi7qMa5fvx4/Pz9uvvnmKj+nF/NY169fz9NPP11toJKVlcWwYcMu+j7BDMEOHjxIXl4eX3zxBT/88AOzZs26qMd17mNWFSBt2LCBUaNGAbBlyxZ8fX1d/afO2bp1qyuE27BhA7Nnz3YbX79+PQMGDLjg471SLjlAioyMJD8/H4AmTZqwefNmOnbsyKlTpzh79uwVL1BERK5RB96Bo1+5X7P5QlRvc3taZG/w1ooIq/iUlrr1K5r67bcMK//GaN0NN5Bmt/NOfDwHGjSwqkQ559QpyMw0t6ht2uQ5brMR1b07YydNYt706cSW/6ZTRKSuupRtZFYKDw8H4E9/+hMNGzZkyJAhgLkyKTc3l1deeYWbb77Z9YP/559/TmlpKWlpaa7VN6+99hrFxcVuAc6mTZvc2sf4+vqSn59Po0aNXEFNZXl5eezdu/eCwcw5TqeToqIi1+qWXbt2UVZW5lohBfDVV19x4sQJVxhS3X1XDk1+7DGuXr2a0tJSzp49S7169Tzu78ce6+7duzl16lS1jzM/P589e/a4PqcX8/kDcwWSzWZjw4YNzJ07l6eeesrVlPtivnaVv24VP3fnPkchISGUlZVRUlLiOgVv//79vP/++3z88cfk5uayb98+j8eXlZXFAw88cMHar5RLDpD69+/PN998Q8eOHZk0aRIPPvggDoeDb775hoSEhKtRo4iIWKnohLnKqOHt4HP+6FNi7OUBkhdEdDVv1+/vPkdqlHdZGQlr15LocDBmyRJufvNN9pZvL//z6NGsbdOGNLud7c2aWVypcOaMeWKawwFr15rNsSsJad+eYRMnMi8lhXYXaGwqIiLXrrDyVaIvvfQSr7zyiut6aGgo+fn5/P3vf+evf/2r63pkZCR5eXl8+umntGvXjs8++4z58+fTpEkTt+1KTqeTjRs3cujQIYKCgujVqxehoaEkJyczb948goOD2blzJ1988YXr427YsAEvLy+3rWTJycm0a9cOu91OgwYN2L17N8899xyGYbhW1kRFRWGz2Vi1ahUjRoxgxYoV3HfffQQGBrr6ElV13+ec29p2sY+xV69ehIWFMXPmTObMmYNhGCxatIhBgwbRtm3bH32sa9euBaBBgwYcqdQoKyYmBi8vL7KysvD29qZDhw4AF/X5AwgODqZ58+Y89thjgNmr6FK+dpW/bmFhYWzYsAFvb2/at2/vqiUyMpI5c+Zw//33s3fvXu6//34mTpzI0KFDWbRoEd7e3h5bGHNycjz6VF0Nlxwg/elPf6KwsBAwO477+vqyZMkSxo0bx9y5c694gSIiYoGSfLMJ9rF0syk2hhkMNbz9/JyIbnDDw1C/n9nXSCxhczrps2ULiQ4HExcupEGF42bHLFnCyxMnAvBlr158WX5crFikqAhWrDC3p61YARWOKz4nIC4O+7hxPPmzn9GnQgNTERG5/pxbgRQUFERiYqLrelhYGE6nk4iICCZMmOC6Pnz4cO644w6Sk5MJDAxk2rRpTJo0ye14d4BnnnmG2bNn89JLLzFr1ixeeOEFPv/8c2bPns3AgQMxDIPWrVuTnJzsep8NGzbQtm1b18lfYPY/ev/993nxxRc5ffo0sbGxDBkyhH/+8580bdoUgEaNGvHb3/6W6dOnExwczKBBg5g4cSLp6el4e3tf8L7BDEw2bdrklhP82GOMioris88+49FHH6VHjx74+fnRs2dPJk+eDJhBTXWPdd26dQAeW8DOrTLy9/d31Xtuhc+P3WdFHTt25LPPPuPdd991O5XuYr52VX3dKtcSFhbGJ598woMPPsgbb7xBo0aNuPPOO13NvM/Nr7i1bv369YSHh1/wFL0ryWYYhnHVP8p1LC8vz7XEMDQ01OpyfrKkrVt559gxPH+/KSJSrqwATiwzT1A7uQqMUvfxiJ7Q6ffW1CZV6rhrF5898QTNjx51XTseGsp7gwaRZrezpGNHDC8vCysUSkvNFUbp6bB0KVSx3d+3USP6jh7NY6mpDO3Zs8qmoSIidVVhYSF79uwhLi7OI6AQkYtT3fPoUjKPS16BFB8fz7Rp05gwYYJrSd617uDBg8yePZsvvviCgoIC2rRpw9///ne6detmdWkiItY7lQWHPjPDI2eh53hgE4i2Q4y2KVut1cGDNDx5kqXlS8R3NW5M/dxc8urV46N+/Vhgt/Ntt25uvY/EAk4nbN5shkYLF0L5STsVeUVE0HXkSB6aPp0ku12hkYiIiFzzLvk7zI4dO/Lkk09y3333MWzYMJKTkxk2bBh+1+iJLTk5Odxyyy3Ex8fzxRdfEBMTw65du1zLCUVE6ry8LZDtcL/mVx9i4s3QKLiN63QuqXlNsrOZnJHBFIeDHt9/z6a4ODr9v/8HwNnAQOwvvMDGVq0oLF/6LBYxDNixw+xp5HBAdrbHFFtwMDfddht3T5vG3cOH4+vra0GhIiIiIj/NJQdIr776Ki+//DLffvstb7/9NikpKXh7ezNhwgSmTp3KwIEDr0adP9nvf/97YmNj+cc//uG6VhN7A0VErimGAfnfmT2NGo2EoBbnx6LtsOdv4BMK0QPNZthhncCmrU9WicrNZcLChSSmp9N/0ya8ynebl3p5cbB+fYIKCjhTvvd9lfrkWGv//vOh0YEDnuP+/rS020lNSmLW+PEEVehZICIiInI9ueweSIWFhXz22Wc8++yzbNq0ibKysitV2xXRrl07brvtNn744QcWLlxIkyZNuOeee9w6pldUVFREUVGR63ZeXh6xsbHqgSQi16fTu83QKDsDCg+b12KToGWl/wNPbYTQduClrU/Xgv88+yzTvv3WdXtxx46k2e28P3Ag2RERFlYmABw7dj402rHDc9zbm8a33MKUKVN4PCmJqOtky7+IyLVIPZBELp9lPZAqOnLkCAsWLOCtt95i48aN9OjR43Lu7qrYvXs3r7/+OrNmzeLxxx9n1apVPPDAA/j7+zN9+nSP+fPnz+c3v/mNBZWKiFwhBYfMRtjH0uHsXs/xE0s8A6TwTjVSmrjzLy5m6MqVJKan83RKClvi4gBYYLfTbt8+0ux23omP50CDBhZXKpw6BZmZZmi0aZPnuM1GVLdujJ08mSeTk2mur5mIiIjUMpe8AikvL48PPviAt99+m8zMTFq2bElSUhJTp06ldevWV6vOn8zPz4/u3buzbNky17UHHniA1atXs3z5co/5WoEkItetEyth37/MrWoevCCiq7k9rX5/8Amu8fLE5F1WRvz69SSlpzN28WLCz5wB4LmkJJ44tzrWMNR36lpw5gwsXmyGRmvXms2xKwlp146hEycyNyWFDuUBoIiIXDnnVk40b96cevXqWV2OyHWpoKCAvXv31vwKpAYNGhAREcGkSZN47rnnrslVRxU1atSIdpX6Q9x000188MEHVc739/fHX41IReR65CzyDI9C25uhUfQg8Iu0pCwxhefn8/Q//sGkzEwa5OS4rh+IjmaB3U5aQoVT7hQeWaeoCFasMEOj5cuhpMRjSkBcHPZx43hixgz6tm9vQZEiInWHn58fXl5eHDp0iOjoaPz8/HRypcglMAyD7OxsbDbbZR/gcckB0ieffMKtt96Kl9f10Vz1lltu4fvvv3e7tn37dpo3b25RRSIil6GsAE4sM7eoNRwK9fudH4vqDd5BENDAPD0txg4BDa2rta4zDOrn5nK8/NTPMwEBJKWnE5WXR3ZYGO8NHEhaQgJLO3TAuE5eU2ut0lJYtw7S02HJEjh71mOKb6NG9Bk9mtmpqQzt2VM/vIiI1BAvLy/i4uI4fPgwhw4dsrockeuSzWajadOmeHt7X9b9XHKANGTIEEpLS3E4HOzatYukpCRCQkI4dOgQoaGhBAdfW9siHn74Yfr27ctzzz3HpEmTWLVqFX/961/561//anVpIiIXx1kCJ1ebPY1OLANnoXnd5uMeIHn5Qc9/a6WRxVodPEhiejqJDgeBRUW0fPttsNko8fXlkZkzORIZSXrXrpT6qGG5pZxO2LzZDI0WLoTcXI8pXuHh3DxyJA+lpJAUH3/d/PJMRKS28fPzo1mzZpSWll5zhzaJXA98fX0vOzyCnxAg7du3j9tvv539+/dTVFTE4MGDCQkJ4Q9/+AOFhYX85S9/ueyirqQePXrw0Ucf8atf/Yqnn36auLg4Xn75ZaZOnWp1aSIiF2aUwakN5kqj44ugNN9zzumd5jxbhRcDhUeWaJydzeSMDBIdDnpUWPVa6OvLDT/8wI7YWAD+dfvtVpUoYPaW2rHD3J6WkWGeplaJLSiIm267jV9Mm8bMESMue6m3iIhcGee23+j/ZRHrXHKA9OCDD9K9e3c2bNhAVFSU6/rYsWP5+c9/fkWLu1JGjBjBiBEjrC5DROTinFgB2/8IxSc8x3xCIXqguT0trBPYtCLCarPefZfn//IXvMrPpCj18uLbbt1Is9v5uF8/8q6xlbl10v79ZmjkcMCBA57jfn7E2e2kJiXxyIQJBAUG1nyNIiIiIte4Sw6QlixZwtKlS/Hz83O73rx5cw4ePHjFChMRqTMqryIKaOAeHnkFmFvVYuwQ0R289Js3qwSfPcvopUvZ0KoVm1u2BGD1jTfiZRgs6dCBtxMSeH/gQLIjIiyuVDh2zFxllJ5urjqqzNubRrfcwpQpU3giKYmosLCar1FERETkOnLJAZLT6axy3+kPP/xASEjIFSlKRKTWKzhkbk/LdkC0HZpPOz8WFAchN4JftBkaRfUB74AL35dcVX7FxQxdtYrE9HRGLl9OvaIiXhs9mvseegiAJR070jwtjf0N1bDccqdOmf2MHA7YuNFz3GYjsls3xk6axNzp02neoEGNlygiIiJyvbrkAGnw4MG8/PLLribUNpuN06dP89RTTzFs2LArXqCISK1RdAKyM8zgKP+7CgMO9wAJ4ObX3FclSY2yOZ0krFtHYno64xYvJvzMGdfY9qZN2dmkieu24eWl8MhKZ86YJ6c5HLBmjdkcu5Lgm25i6MSJzEtNpUNcnAVFioiIiFz/LjlAeumll4iPj6ddu3YUFhaSlJTEjh07qF+/PmlpaVejRhGR61dJvtkE+5gDTmUBnj/c4l0PSs+AT9D5awqPLPf//vAHYrOzAfihfn0W2O2k2e2sa9MGdIS7tYqKYMUKMzRasQKKiz2mBLRoQfz48TyRmsotHTpYUKSIiIhI7XLJAVLjxo3JysoiLS2NdevW4XQ6ueOOO5g6dSqBajopInJeznrY9BgYpZ5jQS0hJsHcohag1SuWMQw67dpFosNBwrp19P3Tnyj18cHw8uL1UaOIzc4mzW5nSceOGDrC3VplZbB2rdnTaMkSOHvWY4pPw4b0HT2ax1JTGdarFzYFfSIiIiJXjM0wyo+NkSrl5eURFhZGbm4uoaGhVpfzkyVt3co7x45VtfZBRK4EZ4m5isgv/Py10rOwfCw4y1dHBDQ+HxoFtbCiSinX6uBBEtPTSXQ4aLdvn+v67b//PV/17GlhZeLG6YQtW8zQaOFCs8dRJV7h4dw8ciQPTp/OVLsdLwV9IiIiIhftUjKPi1qB9Omnn170Bx81atRFzxURua4ZZXBqg7k97fgis9l121+dH/epBw2Hm9vRYhLMxthaEWGpfhs38sLrr9Nz2zbXtUJfXz7v3Zs0u51FnTpZWJ0AYBiwc6cZGmVkmKepVWILCuKm227jF9OmMXPECHx9dTKhiIiIyNV2UQHSmDFjLurObDZblSe0iYjUGoZhNsA+5oDsTCg+cX7s+BIoKwJv//PXbnigxkuU8yJzcwkqLORA+WlbpwMD6bltG6VeXqR37UpaQgIf9etHXnCwxZUKBw6YPY3S082/V+bnR1x8PKlTp/LIhAkEadu8iIiISI26qADJWcWJJiIidcqZPXAsHY5lQOEhz3GvAHMFUtkZ9wBJalxQQQGjlywh0eHgttWrSbPbSXn8cQCyWrcmZfZsvujVi+yICIsrFY4dM1cZpafDjh2e497eNOrblylTpvB4UhL1w8NrvEQRERERMV1yE20RkTrn9E5Ye6fndZsvRPY0expF9QXvgJqvTQDwKy5m6KpVJKanM3L5cuoVFbnGWhw9aq4cs9nAZuPft99uYaVCbq7Zzyg9HTZurHJKZLdujJk0iXkpKTQvXz0mIiIiIta66ABp2LBhpKWlERYWBsCzzz7LvffeS3j5bwNPnDhB//792bp161UpVESkRhSfNN+CW5+/FtTKbIBdeAjwgvCbzdAoegD4aOvTtSDz4YfpU+H1Z0eTJqTZ7aQlJLCteXMLKxPAPDFtyRJzi9qaNeaJapUE33QTQydOZF5qKh3i4iwoUkRERESqc9EB0ldffUVRhd/o/v73vycxMdEVIJWWlvL9999f8QJFRK66knyzCfYxB5zKgpC20PW18+M2GzRLAmcRRA8Cv0irKhXDoM+WLUxcuJAn7riDggBz1dfnvXoRe+wY78THk5aQwNo2bdSw3GrFxbBihRkaLV9u3q4koEUL4seP54nUVG7p0MGCIkVERETkYl10gGQYRrW3RUSuK2WFcGKZ2dfo5CowSs+P5W+FgkMQ2Pj8tUbDa75GMRkGnXbtItHhYIrDYW5JA5a1b8/7gwYB8MfJk3l22jQMHeFurbIyWLvWDI2WLIEzZzym+DRsSN/Ro3ksNZVhvXphU9AnIiIicl1QDyQRqTucpZCz2gyNji8FZ6HnnIDG5vY0LzXCtlp0Tg53/fe/JKan037fPtf10wEBfNyvH3sbNnRdK/TX18syTids2WKGRgsXQk6OxxSv8HC6jBjBQ9OnMzUhAS8FfSIiIiLXnYsOkGw2m8dvCfVbQxG5rpSehs1PApVOlvSLguh4MzgKaautTxbyKivD6e0NQOjZszzz//4fAEW+vnzeqxdpdjv/7dPHtXVNLGIYsGuX2Qg7IwPKV4VVZAsKou2QIfxi2jTuGTkSX19fCwoVERERkSvlkrawpaam4l/+W97CwkLuvvtugoKCANz6I4mIWMowIH8bFB2D6IHnr/uFQ0R3yFkFPiFmE+zoBAjvBDZvy8qt6yLy8hi/aBFJ6emcDAlhwtNPA7CrSRNeHTuW9TfcwEf9+5MbrIbllvvhBzM0cjhg/37PcT8/4uLjSUlK4pcTJxIUGFjzNYqIiIjIVXHRAVJKSorb7WnTpnnMmT59+uVXJCLyU53ZYzbCPuYwT0zzDYOoW8Crwn91zaZCkzFmkOSlFRFWCSooYPSSJSQ6HNy2ejW+5adyFfr6ElRQwJny4OHBBx6wskwByM42Vxmlp8P27Z7j3t406tuXKVOm8HhSEvXLD9cQERERkdrlogOkf/zjH1ezDhGRn6bgMGSXh0ZndruPleTCqXUQ2fP8tfBONVufeHjqn//ksQULqFdh5WpWq1a8nZDAO/HxrvBILJSba/Yzcjhg40ZzVV8lkd26MWbSJOalpNC8QQMLihQRERGRmqQm2iJy/XEWw6HPzNAof2sVE7wgvIvZ0yi0XU1XJxV4l5URv349q9u2dW1BOxUcTL2iInY0aUKa3U5aQgLbmje3uFLh7FlYutRcabRmjXmiWiXBbdsydOJE5s6YQce4OAuKFBERERGrKEASkeuPzRsOpEHxCffrIe3M0CgmHvwiralNwDDovXUrSenpTMrMpEFODnf88pf8v+HDAXhr8GCWdOzI2jZt1LDcasXFsHKlGRqtWAFV9DP0b96c+PHjeWLGDPp16GBBkSIiIiJyLVCAJCLXrrJCOLEMzu6DFjPOX7d5m6emHXwfglqaoVG0HQIbWVdrXWcYdNy9m0SHgykOB3FHjriGjoeGum1XOxEWxomwMCuqFDBXFq1bZ25PW7wYzpzxmOLToAF9xozh0ZQURvTurVNXRUREREQBkohcY5wlkLMGjqXD8aXgLAS8oPFo91VFTcdDo2EQpG0014LoU6dYf9ddeDudAOQHBvJxv36k2e180707pT56ubGUYcCWLWZolJkJOTkeU7zCw+kyYgQPJicz7dZb8fLyqvk6RUREROSape/oRcR6Rhmc2gjZ6ZC9GErzKk1wwvHFZoh0TkDDGi1Rzmt0/DiTMjNpeeiQ65S07IgIvuzRg2JfX9Lsdv7bpw8FAQEWV1rHGQbs2mWGRg4HHD3qMcVWrx5tb7uNX0ybxj0jR+Lrq5MJRURERKRqCpBExDqGE3b/BY5lQPFxz3GfEKg/wNyiFt655usTl4i8PMYvWkSiw8GgrCy8DAOnzcbvkpI4XL8+ACPmz1dPo2vBwYNmTyOHA/bt8xz386NFfDwpSUk8OnEiQTr1TkREREQuggIkEbGOzQvyv3cPj7wCoH5fiE6AyB7gpRURVhq0fj2z3nuP21avxq+01HV9Wfv2vJ2QwJmKq4wUHlknOxsyMszQ6PvvPce9vWnYpw+Tp0zhialTiQ4Pr/ESRUREROT6pgBJRK6+gsOQ7YBTG6Dj78zg6JwYO+RthcieEJMAUX3AWysirOJXXIxPWRlny1eltDhyhJHLlwOQ1aoVaQkJvBMfz76G2kJoudxcWLjQDI02bjS3rFUS2bUroydNYl5KCi30NRMRERGRy6AASUSujuKTkJ0JxxyQt+X89bwtENbx/O0GQ8wT1HxDarxEMXmVlTEoK4uk9HTGLV7M09On8/LEiQB81L8/cYcPs8Bu57sWLawtVODsWVi61NyitmaNeaJaJcFt23L7xInMS02lY8uWFhQpIiIiIrWRAiQRuXJKT0P2IjM0OrUecHrOyd3sHiB5B4J3jVUo5xgGvb77jsT0dCZlZtLo5EnXUMK6da4AKTc4mKd+9jOrqhSA4mJYudIMjVasgKIijyn+zZsTP348T8yYQb8OHSwoUkRERERqOwVIInJlfP97OJoORonnWFBLc6tatB0CG9V8beLGq6yMTXfcQbsKDZZPhIby/oABpCUksLhjx2reW2pEWRmsX2+GRosXw5kzHlN8GjSgz5gxPJqSwojevbGpB5WIiIiIXEUKkETk0hlO9z5GAHi7h0cBjSEm3uxrFBRXo+WJu7hDh0hYt46/jRgBgNPbm23NmtHs6FE+7tePNLudb7p3p0RHuFvLMGDLFrOnUWYm5OR4TPEKD6fz8OE8kJzM9MGD8fKq/DwUEREREbk6FCCJyMUxyuDURshOhxPLofs/3fsWxdjh5HKIjjf/HnKTTuWyUKPjx5mUmUliejq9tm0DILNLF3Y2bQrAA/ffz8mQEAoqnqImNc8wYNcuMzRyOODoUY8ptnr1uHHIEO6aNo17R47Ez8/PgkJFREREpK5TgCQiF2YYkP89HEs3G2IXHz8/dnwRNBp+/nZ4F+j9LtjU0Mgq4fn5TFi4kESHg0FZWXiVn8pV5uWF4+abCS4ocM09GB1tVZkCcPCguT3N4YAKWwld/PxoMWgQ05OSeHTiRILr1av5GkVEREREKlCAJCKezuw1G2EfS4fCQ57jXgFQcsr9mseWNqlpCevW8eYLL7huL2vfnjS7nfcGDeJoZKSFlQkA2dmQkWGGRt9/7znu7U3DPn2YPGUKT0ydSnR4eI2XKCIiIiJyIQqQRMTdd8+YwVFlNh+I7GluT4vqa56eJpbwKy7mttWrSXQ4WNumDS9MngzA//XuzdL27fmsb18W2O3sa9jQ4kqF3FxYuNAMjTZuNFf1VRLZtSujJ01i7vTpxDVSk3kRERERuTYpQBKpy4pzwDfcvVdR8A0VAiSbuTUtJgHq9wffUAuKFDBPThuUlUWiw8H4RYuIOH0agC47d/LCpElgs1Ho70+/P/3J4kqFggJYssQMjVavNk9UqyS4bVtumzCBeampdGrVyoIiRUREREQujQIkkbqm9DRkLzK3qJ1aD13/AiE3nB+PjjfHY+LNv/tHWVerAPDbv/+dOz7/nEYnT7quHaxfn3cGDSItIcHCysSluBhWrTL7Gi1fDkVFHlP8mzVj0LhxPP6znzGgY0cLihQRERER+ekUIInUBWWFcGKZGRqdXAVGyfmxY+nuAVJADHR9reZrFJe2+/axrVkz18qwptnZNDp5khOhobw/YABpCQks7tgRp7calluqrAzWrzdDo8WL4cwZjyk+MTH0HjOGX6akMKpPH2w6mVBERERErlMKkERqK2cp5Kw2Q6PjS8BZ6DknoBH416/52sRD3KFDTHE4SHQ46LhnDzf/9a9k3WAGey9PmMD7AwfydffulPj6WlxpHWcYsGWLuT0tMxNycjymeIWH03n4cB5ITmb64MF4eanBvIiIiIhc/xQgidRWO16EI194XveLNLemxdgh5Cb3/kdSoxqeOMGkjAwSHQ56f/ed63qRry9ddu50BUgbWrdmQ+vWVpUphgG7dpmhkcMBR496TLHVq8eNQ4Zw17Rp3DtyJH5+fhYUKiIiIiJy9ShAErneGQac3g71mrmfjBZ1y/kAyScY6g8wQ6PwLmDT1ierdd+2jRX33ou30wlAmZcXjptvJs1u58MBA8gNDra4QuHgQTMwSk+Hffs8x/38aD5wIClTp/LoxIkE16tX8zWKiIiIiNQQBUgi16sz+8z+RdkOKDgIN801A6JzIntCg9uhfj+I7AFeWhFhlXoFBYxatgz/khL+dfvtAKy/4Qayw8LY3bgxaXY77w0axNHISIsrFY4fh4wMMzjats1z3MuLhn36MGnKFJ6YOpWYiIiar1FERERExAIKkESuJ4VH4FiGGRyd2eU+dizdPUDy8oW2s2u2PnHxLSnh9lWrSHQ4GLVsGUGFhfxQvz7/HjIEw8uLMm9vbvz3v8nTSiPr5ebCokVmaLRhg7mqr5KIm29m9KRJzEtJIa5RIwuKFBERERGxlgIkkWtd8UnIXmgGRHlbqphgM7el1R9Q05VJFfpu2sSML79k/KJFRJw+7bq+q3Fj3k5IIKC4mIKAAACFR1YqKIAlS8zQaPVq80S1SoLbtuW2CROYl5pKp1atLChSREREROTaUacCpPnz5/P444/z4IMP8vLLL1tdjsjFOfQZ7Pun5/WQm8wVR9Hx4B9V42VJuXOrVcqbkU/JyODnn38OwKGoKN6JjyfNbmd127ZqWG614mJYtcrsabR8ORQVeUzxb9aMQePG8fiMGQzo1MmCIkVERERErk11JkBavXo1f/3rX+mkHwjkWlVWCCeWQ+hNENDw/PWY+PMBUlAcRNvN4CiwsSVliqn9nj0kffstUzIy+Nljj7GwSxcA/j1kCP7FxaQlJLCoUyec3mpYbqmyMsjKMkOjRYvgzBmPKT4xMfQeM4ZfpqQwqk8fbAr6REREREQ81IkA6fTp00ydOpU333yTZ555xupyRM5zlkLOajjmgBNLoawAmqdCi5Tzc+o1g1b3QnhXCG5pWakCcYcOMcXhINHhoOOePa7rkzIyXAHSmrZtWdO2rUUVCmCuCtu61QyNMjMhJ8djildYGJ2HD+f+5GSmDx6Mt4I+EREREZFq1YkA6d5772X48OHceuutCpDEeoYTcjeaoVH2QijNcx8/lg7Np7tvd2o6oWZrFDf1T53is8cfp/d337muFfn68kXPnqTZ7fy3Tx8LqxPADI127zZ7GjkccOSI55zAQG4cMoS7pk3jvlGj8PPTyYQiIiIiIher1gdICxYsYO3ataxZs+ai5hcVFVFUoS9GXl5eNbNFLsHZ/XD4v+YpasXHPcd9gs1G2BVPUhNLhOfn037vXpZ27AjA8bAwGuTkUOblhePmm0mz2/lwwABy1QTbegcPmoFRejrs2+c57udH84EDmZ6UxKMTJxISFFTzNYqIiIiI1AK1OkA6cOAADz74IF9//TUB5ace/Zj58+fzm9/85ipXJnXS6R3ww3vu17wCIKqvGRpF9gAvrYiwSr2CAkYtW0aiw8Htq1ZxOjCQhh98QImvL9hsJD35JHsaNeJoZKTVpcrx45CRYQZH27Z5jnt50bBPHyZNmcITU6cSExFR8zWKiIiIiNQyNsM4d4RQ7fPxxx8zduxYt94WZWVl2Gw2vLy8KCoq8uh7UdUKpNjYWHJzcwkNDa2x2q+0pK1beefYMZxWF1IXFB41t6eFtoPwzuevlxXAsnFglEJkTzM0iuoL3oHW1VrH+ZaUcPuqVSQ6HIxatoygwkLX2MaWLRn79NPsbtLEwgrFJS/PbIKdng4bNpw//a6CiC5dGDVpEk+lpBDXWE3mRURERER+TF5eHmFhYReVedTqFUgJCQls2rTJ7dqMGTNo27Yts2fPrrJpqr+/P/7+/jVVotQWxTmQnWkGR3mbzWsxdvcAyTsQOjwLwa3B9/oNI2uTx//3f/n1v/7lur2rcWPS7HbS7Ha2xsVZWJkAUFAAS5eaK41Wr4bSUo8pQTfeyG0TJjBvxgw6t2plQZEiIiIiInVDrQ6QQkJC6NChg9u1oKAgoqKiPK6LXLLS03B8idn0OmcdVF7fdXwZOIvdt6VFdK3REqWcYdDzu+9IdDj4b58+pHfrBsD7Awdy13//yzvx8aTZ7axu29a9ebnUvOJiWLXKDI2WLYMKK0LP8W/WjIFjx/L4z37GwE6dLChSRERERKTuqdUBkshVcXon7Ps3nFgBRonneL0WEJMAMfHqaWSx9nv2kJiezpSMDFodOgRAg5wcV4C0JS6O2Hfewakj3K1VVgZZWeb2tMWL4fRpjyk+0dH0Gj2aX6amMrpvX2wK+kREREREalSdC5AyMzOtLkGud4YTji92vxbQEKLtZnAU3NKaugQAr7IyZqelkehw0HHPHtf1MwEBfNK3L/++7Ta3+QqPLGIYsHWrGRplZkJOjscUr7AwOg8fzv3JyUwfPLjKbcciIiIiIlIz6lyAJHJRDCfkboRjGWbPosYjz48F3wCBseYWtph4MzQKuUlbnywUfPYsp+vVA8xAaEpGBh337KHYx4cvevYkLSGBz/r04WygGpZbbvduMzRyOODIEc/xwEBuHDKEu6ZN475Ro/Dz0yo+EREREZFrgQIkkXMMA05vNxthZ2dAUbZ5PfgG9wDJZoNOfwD/aLBpRYRVwvPzGbdoEYkOBz23baPx++9zpjwgenbqVIILCvhwwABOhYRYXKlw8CBkZJjB0d69nuN+fjQbMIDpSUk8NmkSIUFBNV6iiIiIiIhUTwGSyNn9ZiPsYw4o+KGK8QNQfBL8Is9fC2hYc/WJS72CAkYuX05iejpDV63Cr8KpXP03buTLXr0AeNdut6pEOef4cXNrWno6bNvmOe7lRYPevZk0ZQpPTptGTEREjZcoIiIiIiIXTwGS1F2nd8P3882m2JXZvCGiJ8TYof4t4K2tT1YbuXQpac88Q1BhoevaxpYtSbPbWWC3s7dRIwurEwDy8mDRInN7WlaWuaqvkoguXRg1aRLzUlJo2bhxzdcoIiIiIiI/iQIkqTsMw71PkX80nNlbYYINwruUh0YDwDe0hguUc7zKyhi4YQNnAwJY2a4dABtbtSKosJBdjRuTZreTZrezNS7O4kqFggJYutQMjVavhgqrws4JuvFGbpswgbmpqXRp3dqCIkVERERE5HIpQJLarfS0eWLaMQcENoYbHj4/5hsCkT3N7WkxCRA9CPzrW1ZqnWcY9PzuOxIdDiZlZtL4xAn+27s3I+fPB2Bfw4Z0+H//jy0tWqhhudWKi2HVKjM0Wr4cKqwKO8e/WTMGjh3L4z/7GQM7dbKgSBERERERuZIUIEntU1YEJ5ebodGJFWCUmNfzQ6DVfeDle35uu6fAS6c8Wandnj0kOhwkOhy0OnTIdf1kSAj7GjRwWzm2RSuOrFNWZm5LczjMbWqnT3tM8YmOpufo0Tyamsrovn2xKegTEREREak1FCBJ7eAshZw15aHREigr8JzjEwSFh6Fes/PXFB5Z7o0XX6Tf5s0AnAkI4JO+fUlLSOCrHj0o8fX9kfeWq8ow4LvvzEbYmZlw8qTHFK+wMDoNH879ycmkDB6Mt7dOJhQRERERqY0UIMn1r+AgrLsHSvM8x3wjIGYQRCdAaDttfbJQg5MnmZSRwaTMTMY88wwnwsIA+Ndtt3EyNJS3ExL4rE8fzgaqYbnldu82Q6OMDDh82HM8MJAbBw/m59Om8cDo0fj5KYgVEREREantFCDJ9cUwzL5GviHnrwU0Am9/ONe71zsIogeYfY3Cu5gnqoklwvPzGbdoEYkOB/FZWXg7nQBMWLiQN0aNAuBvI0bwtxEjrCxTAA4dMrenpafD3r2e435+NBswgOlJSTw6cSKhwcE1XqKIiIiIiFhHAZJcH87uh2Pp5hY1v0jo8sr5MZsXNLgdCg6YoVFkT21Ns1irgwf54+uvM3TVKvxLSlzXV9x0E2l2Ox/362dhdeJy4oS5yig9HbZt8xz38qJB795MmjKFJ6ZOpUFkZM3XKCIiIiIi1wQFSHLtKjxqBkbZDji98/z1goNQlA3+0eevxf2s5usTF9+SEhqePMmBBg0AyA0KYsTy5fg4nWyKiyPNbmeB3c6exo0trlTIyzObYDscZlNsw/CYEt6lC6MnTWJeSgot9TUTEREREREUIMm1pjgHsjPN4ChvcxUTbBDWGUry3AMkqXFeZWUM2LiRxPR0JixaxOa4OAa+Yq4MOx4ezp2//CVrbryRzS1bWlypUFAAy5aZodGqVVBa6jEl6MYbGTJhAvNSU+nSurUFRYqIiIiIyLVMAZJcO0pPw4rJYJR4joW0hRg7RA9ScGQlw6DHtm0kOhxMzsig8YkTrqFWhw4RVFDAmfIm2P8cOtSqKgWguBhWrzZDo2XLoLDQY4pfbCwDx43j8RkzGNS5swVFioiIiIjI9UIBklijrMjsWRRcYaWDTzCEdYBT683b9ZqbPY1i7BDYxJo6xc3fnn+eO774wnX7ZEgIHwwYQJrdzsLOnXHqCHdrlZWZ29IcDnOb2unTHlN8oqPpOWoUj6SmMvaWW7DpZEIREREREbkICpCk5jhLIWet2Qz7xBLwrge933E/Ja3xaAi5yQyNglqCfri1TIvDh5nicPDW4MH8EBMDQGaXLkzJyOCTvn1JS0jgqx49KPH1tbjSOs4w4LvvzEbYmZlw8qTHFK+wMDoNG8Z906eTOngw3gr6RERERETkEilAkqvLcELupvJm2JlQmnd+rKwATm2EiJvPX4seaL6JJRqcPMmkjAwSHQ76bN0KQKm3N3+cMgWA9wYN4sP+/Tlbvk1NLLRnD3z7rXmK2uHDnuOBgdw4eDA/nzaN+0ePxt9PJxOKiIiIiMhPpwBJrjzDgNPby0OjDPPEtMq8gyC6P/iF13h54i6wsJDE9HQSHQ7is7LwdjoBcNpsZHTpwvexsa65RQohrHXokLk9zeEwA6TKfH1pNnAgyUlJPDZxIqHBwTVfo4iIiIiI1EoKkOTKM8pg02woyXW/7uUPUX3MvkaRPcFLYYRlDMO1PdDb6eRPr75KYHExACtuuok0u5134+M5EhVlZZUCcOKEucrI4TC3qlXm5UVMr15MSkzkyalTaRAZWfM1ioiIiIhIracASS5P4THI32qejnaOlw/UHwiHPzX7G0X0MHsaRd0CPvUsK7Wu8y0pYciaNSSmp9Ps2DEGvPoqAKfr1ePlCRPIDwxkgd3OnsaNLa5UyM83m2Cnp8OGDVC+Kqyi8C5dGDVxIvNSUmjVRE3mRURERETk6lKAJJeu+JTZz+iYA/I2mSFR+M3gG3Z+TuORENzK7GdU8brUKK+yMgZs3EhiejrjFy8mKu98D6ob9+/n+2bNAHj8zjutKlHOKSiAZcvMlUarVkFpqceUoDZtGDJhAnNTU7n5hhssKFJEREREROoqBUhycUrPwPHFZmiUsxaosCLCKIPshdB41Plrwa3NN7HM1G++4fd//StNjh93XTsSEcE78fGkJSS49TYSi5SUmGGRw2GGR4WFHlP8YmMZOG4cj8+YwaDOnS0oUkRERERERAGSVMcw4PgiOJYOJ1aAUeI5p17z8z2NxFI37d3LqeBgDtevD0B+YCBNjh8nJziYDwYMIM1uJ7NLF5w6wt1aZWXmtjSHw9ymlp/vMcU7Opqeo0bxy9RUxt5yC7byflUiIiIiIiJWUYAkF2azwYF3IL9S417/BmZoFGOHoJauZsxS85ofOcIUh4PE9HQ6797Nb5OTmfeznwHwZc+ejHrmGb7q0YNinZ5mLcMwG2A7HJCZaTbGrsQWGkqn4cO5LzmZGUOG4K2gT0REREREriEKkAQMJ+RuhpxV0OIO90Aoxm4GSL4RZqPsmAQIbafQyEIxJ08yKTOTRIeDvlu2uK4X+/gQUWE1S7GfH5/dcosVJco5e/aYjbAzMuDQIc/xwEDa3HorP582jftHjybA37/maxQREREREbkICpDqKsOA0zvMnkbZDijKNq9H3QKhN52fF5MA9VpAxM1ms2yxlFdZGZt/9jOic3MBcNpsZHbpwtsJCXzYvz85oaEWVygcOmSuNHI4zACpMl9fmg0YwLSkJGZPmkRocHDN1ygiIiIiInKJFCDVNWf3m6HRMQcUHPAcP+ZwD5D8IiCye83VJy6BhYWMXLaMhHXr+MUjj4DNhtPbm4/79aPTrl2kJSTw7qBBrp5HYqETJ8xVRg6HuVWtMi8vYnr1YuKUKTw5dSoNo6JqvkYREREREZHLoACpjtixMw3njnfMVUeV2bwhoru52ihKW56s5FtSwuA1a0hKT2f00qUEl5/K9bfhw1l9kxnszXz4YcrUH8d6+flmE2yHA7KywOn0mBLeuTOjJk1iXkoKrZo0qfkaRURERERErhAFSHXE8ZMbK4VHNgjrZPY4ih4IvmGW1SbQdt8+Hnr/fSYsWkRUXp7r+p6GDUmz2zkSGem6pvDIQgUFsHy52ddo1SooLfWYEtSmDYPHj2duaipd27SxoEgREREREZErTwFSHdG82TD27vsUQm6EaDvExIN/tNVl1V2GQUBxMYXlTZMbnTjBL/77XwCORETwTnw8aQkJrLzpJjUst1pJCaxebYZGy5ZB+aqwivxiYxkwbhy/SknBfvPNFhQpIiIiIiJydSlAqiMaxvTG1uM/GPWaWl1KnXbT3r0kOhwkpqfzf71789D99wOwsHNnXhk3jk/79iWzSxecWmVkrbIy2LDB3J62aJG5Xa0S7/r16Tl6NLNSUhjfrx82BX0iIiIiIlKLKUCqI7y8fLHVa4phdSF1UPMjR5hSHhp13r3bdX3EihU8dN99rubY58IksYhhmA2wHQ7IzDQbY1diCw2l07Bh3JecTOqQIfj46L9QERERERGpG/TTj8hV9N5TTzFh0SLX7WIfH77q0YM0u51Pb7lF29OuBXv2mKGRwwGHDnmOBwbS5tZb+fm0adw/ejQB5dsORURERERE6hIFSCJXSNjp04xaupS3b73V1eh6f0wMTpuNzC5dSLPb+WDAAHJCQy2uVDh8+HxoVGFVmIuvL7EDBpCclMTsSZMIDQ6u+RpFRERERESuIQqQRC5DYGEhI5YvJ9HhYNjKlfiXlHA4Kopvu3cH4I+TJ/PHyZM5XL++xZUKJ09CRoYZGm3d6jnu5UVMr15MnDKFJ6dOpWFUVM3XKCIiIiIico1SgCRyiXxLShi8Zg2JDgejly4lpKDANbaleXP8S0pctxUcWSw/32yC7XBAVhY4nR5Twjt1YsSkSTyVmkrrJk1qvkYREREREZHrgAIkkUvUcfdu/u/xx1239zRsyAK7nTS7nU0tW6qvkdUKCmD5ckhPh1WroLTUY0q9G25gyPjxzJ0xg65t2lhQpIiIiIiIyPVFAZLIhRgG3bZvJzE9nRIfH351110ArGvThkWdOpHVqhVpCQmsaNdOoZHVSkpgzRr49ltYtgwKCz2m+DVtyoBx4/hVair2m2+2oEgREREREZHrlwIkkUpu2ruXRIeDKQ4HNxw8CEBuUBC/Tk2lyM8PbDYGvvKKxVUKZWWwcaO50mjRInO7WiXe9evTY/RoHklJYXy/ftgU9ImIiIiIiPwkCpBEyqV+8QUPvf8+nSucynXW359P+/YlzW6nzMvLwuoEAMOAbdvMnkYZGXDihMcUW2goHYcN477kZGYMGYKPj/6bExERERERuVz6yUrqrJiTJzkVHEyxnx8ALY4cofPu3ZR4e/Nlz56k2e18esstnAkMtLhSYc8eMzRyOODQIc/xwEBuSEjg59Om8cCYMQT4+9d8jSIiIiIiIrWYAiSpU8JOn2bs4sUkOhwkrFvHxKee4qMBAwD412238UN0NB8MGEBOaKjFlQqHD58PjSqsCnPx9SW2f3+mJSUxZ/JkQoODa75GERERERGROkIBktR6gYWFjFi+nESHg2ErV+JfUuIa6/H9964AaU/jxvytcWOryhSAkyfNrWkOB2zd6jnu5UVMz55MmDKFudOm0TAqquZrFBERERERqYMUIEmtFp2Tw66pUwkpKHBd29K8OW/feisL4uPZ3aSJhdUJYDa/XrTIDI2yssDp9JgS1qkTIydNYl5KCjc0bVrzNYqIiIiIiNRxtT5Amj9/Ph9++CHbtm0jMDCQvn378vvf/54bb7zR6tLkCrM5nfTfuJEbDxzgzZEjAciOiGB706ZE5eWRlpBAmt3OppYtQadxWaugAJYvN09QW70aKqwKO6feDTcwePx45s6YQbc2bSwoUkRERERERM6p9QHSwoULuffee+nRowelpaU88cQTDBkyhK1btxIUFGR1eXK5DINu27eTmJ7O5IwMmh4/TqGvLwvsdvLLv77Dfvc7jkVEKDSyWkkJrFljhkZLl0JhoccUvyZN6D9uHL+aMYOEm2+2oEgRERERERGpSq0PkL788ku32//4xz+IiYlh7dq1DCjvfSPXn1YHDzL9q6+YkpFBmx9+cF0/FRTEBwMGEFxQ4AqQjkVGWlWmlJXBxo1maLR4MeTleUzxrl+fHqNG8UhKCuP798emoE9EREREROSaU+sDpMpyc3MBiFSocP0xDNcqolFLlzLvP/8B4Ky/P5/27Uua3c6XPXtS7OdnZZViGLBtm9nTKCMDTpzwmGILCaHjsGHcm5zMz267DR+fOvdfkYiIiIiIyHWlTv3UZhgGs2bNol+/fnTo0KHKOUVFRRQVFblu51WxYkJqTszJk0xcuJDE9HT+OmIE/779dgDejY/Hvn49aXY7n/Trx5nAQIsrFfbsMUMjhwMOHfIcDwzkhoQE7pg6lQfHjiXA37/maxQREREREZGfpE4FSPfddx8bN25kyZIlF5wzf/58fvOb39RgVVJZ6OnTjF2yhKT0dBLWrcO7/FSu04GBrgDpYHQ0I+fPt7JMATh8+HxotHu357iPD7EDBjA1MZHZkycTHhJS8zWKiIiIiIjIZbMZhmFYXURNuP/++/n4449ZtGgRcXFxF5xX1Qqk2NhYcnNzCQ0NrYlSr4qkrVt559gxPA9Iv3Z4lZWx4Le/ZeSyZQRUOJVrVdu2pNntvDtoEIeioy2sUAA4eRIyM83QaMsWz3EvL2J69mT8lCk8OXUqjevXr/ESRURERERE5Mfl5eURFhZ2UZlHrV+BZBgG999/Px999BGZmZnVhkcA/v7++GtrTY3wKS2l6/btrGrXDgCntzf1c3MJKClha/PmpNntpCUksKtJE4srFU6fhkWLzNBo/XpwekaRYZ06MWLiRJ5KTeWGpk0tKFJERERERESullofIN177728/fbbfPLJJ4SEhHDkyBEAwsLCCFTfnBpnczrpv3EjiQ4HExYuJOL0aRq/957rpLQ5d95JoZ8fG1u1cjXMFosUFsKyZWZotGoVVFgVdk691q25dcIE5qam0v3GGy0oUkRERERERGpCrQ+QXn/9dQAGDRrkdv0f//gHqampNV9QXWQYdN2+nUSHg8kZGcRmZ7uGjkZEcOOBA64A6dxqJLFISQmsWQPp6bB0qRkiVeLXpAn9x45lzowZ3Nq1qwVFioiIiIiISE2r9QFSHWnxdE1L+vZb/ve551y3TwUF8WH//qQlJJBx882UeXtbWJ1QVgYbN5qh0eLFUMXJg95RUfQYPZpZKSlM6N8fm1aHiYiIiIiI1Cm1PkCSmhV79ChTHA72NmzIe/HxAHzRqxengoL4qkcP0hIS+KJnT4r9/CyutI4zDPj+ezM0ysyE48c9pthCQugwdCj3JCfz89tvx8dH/12IiIiIiIjUVfqJUC5bdE4OEzMzSXQ46Ld5MwDL27VzBUg5oaE0+PBDhUbXgr17zZ5GDgccPOg5HhBA61tv5Y6kJB4aN44ANZQXERERERERFCDJZUj89ltSvvqKhHXr8Ck/lctps7GoUyfeTkgwV7mUb3VSeGShI0fMwCg9HXbv9hz38aFp//5MTUxkzpQphIeE1HyNIiIiIiIick1TgCQXza+42C0ImpyRwW1r1gCw+sYbSbPbeSc+nkPR0VaVKOecPGluTXM4YMsWz3GbjeiePZkwZQpPTptG4/r1a7xEERERERERuX4oQJJq+ZSWcuvatSSmpzNm6VK6vPkmexo3BuDPo0ez5sYbWWC3s7NpU4srFU6fhkWLzNBo/XooXxVWUVjHjoyYOJF5qam0iY21oEgRERERERG5HilAEg82p5N+mzaR6HAwMTOT+hVO5Rq9dCkvT5wIwNc9e/J1z55WlSkAhYWwfLkZGq1cCSUlHlPqtWrFrRMm8GRqKj3atrWgSBEREREREbneKUASN5127uS/jz9ObHa269rRiAjeHTSINLudFe3aWVidAFBaCqtXm6HR0qVQUOAxxbdxY/qPHcucGTMY3K2bBUWKiIiIiIhIbaIAqY5rs38/DXJyWNy5MwA7mjYlIj+f3KAgPuzfnzS7HUfXrpR5e1tcaR3ndMLGjWYj7EWLoMKqsHO8o6LoPnIks1JTmThgALbyBuYiIiIiIiIil0sBUh0Ue/QokzMySEpP5+adO9ncogUd//EPAAoCAhj08stsjoujSCenWcsw4PvvzdAoMxOOH/eYYgsOpsOwYdyTnMzPb78dHx89pUVEREREROTK00+bdUToiRPM/OgjJmdk0H/TJtf1Em9v9jZsSFBBAWcCAwFYe+ONVpUpAHv3mtvTHA44eNBzPCCA1gkJ/CwpiYfGjSMwIKDGSxQREREREZG6RQFSHTH1+efp/9lnADhtNhZ16kSa3c77AwdyMizM4uqEI0fMwCg9HXbv9hz38aFp//5MnTKFOYmJhIeE1HyNIiIiIiIiUmcpQKojlg8dSsD27aTZ7bwTH8+h6GirS5KTJ2HhQjM02rLFc9xmI7pnT8ZPmsSTyck00ddMRERERERELKIAqY7IGjCAX910E06rC6nrTp+GxYvN1Ubr1pnNsSsJ7diRERMnMi81lRtjYy0oUkRERERERMSdAqS6QidyWaewEJYvN0OjlSuhpMRjSmCrVtw6YQJPpqbSs21bC4oUERERERERuTAFSCJXQ2kprF5thkZLl0JBgccU38aN6Td2LHNSUxnSvbsFRYqIiIiIiIhcHAVIIleK0wkbN5o9jRYtgrw8jyneUVF0GzmSh6dPZ/KgQdi0MkxERERERESuAwqQRC6HYcD27WZolJEBx497TLEFB9N+6FDuSU7mzqFD8fHR005ERERERESuL/pJVuSn2LfPDI0cDjh40HM8IIDWCQn8LCmJh8aNIzAgoOZrFBEREREREblCFCCJXKwjR8xVRunpsGuX57iPD0369SMpMZHHExMJDwmp+RpFRERERERErgIFSCLVOXkSFi40Q6MtWzzHbTbq9+jB+MmTeTI5mabR0TVfo4iIiIiIiMhVpgBJpLLTp2HxYnN72rp1ZnPsSkI7dGD4xInMS02lbbNmFhQpIiIiIiIiUnMUIIkAFBXB8uXmSqOVK6GkxGNKYMuWJEyYwNzUVHredJMFRYqIiIiIiIhYQwGS1F2lpbBmjbnSaMkSKCjwmOLbqBG3jBvHnNRUbuve3YIiRURERERERKynAEnqFqcTNm40Q6OFCyEvz2OKV2Qk3UeN4uHp05k8aBA2m82CQkVERERERESuHQqQpPYzDNi+3dyelpEBx497TLEFB9N+6FBmTpvGXcOG4eOjp4aIiIiIiIjIOfopWWqvffvOh0Y//OA57u9Pq4QEZkydyqxx4wgMCKj5GkVERERERESuAwqQpHY5csQMjNLTYdcuz3EfH5rccgtJiYn8KjGRiNDQmq9RRERERERE5DqjAEmufzk5kJlp9jXavNlz3GajfvfujJs8mbnTp9M0OrrGSxQRERERERG5nilAkuvT6dPmyWnp6bBundkcu5LQDh0YNnEi81JSuKl5cwuKFBEREREREakdFCDJ9aOoCJYvN1carVgBJSUeUwJbtiRh/HienDGDXjfdZEGRIiIiIiIiIrWPAiS5tpWWwpo1Zmi0ZAkUFHhM8W3UiFvGjuWxlBRu79EDm81mQaEiIiIiIiIitZcCJLn2OJ2wcaMZGi1cCHl5HlO8IiPpNnIkD02fTmJ8vEIjERERERERkatIAZJcGwwDtm83Q6OMDMjO9phiCw6m3e23M3PaNO4aNgxfX18LChURERERERGpexQgibX27zcbYTsc8MMPnuP+/rRMSGBGUhKzxo+nXkBAzdcoIiIiIiIiUscpQJKad/SoGRg5HLBzp+e4tzeN+/UjKTGRXyUmEhkaWvM1ioiIiIiIiIiLAiSpGTk5kJlphkabN3uO22xEde/OuEmTmDt9OrExMTVeooiIiIiIiIhUTQGSXD1nzsDixWZotHat2Ry7kpD27Rk+cSJzU1Jo16JFzdcoIiIiIiIiIj9KAZJcWUVFsGKF2ddoxQooKfGYEtiyJfZx43hyxgx6t2tnQZEiIiIiIiIicikUIMnlKy01Vxilp8PSpXD2rMcU30aN6DtmDLNTU7m9Rw9sNpsFhYqIiIiIiIjIT6EASX4apxM2bTK3py1cCLm5HlO8IiPpNnIkD02fTmJ8vEIjERERERERkeuUAiS5eIYB27eboVFGBmRne0yxBQfT7vbbmTltGncNG4avr68FhYqIiIiIiIjIlaQASX7c/v3m9rSMDDhwwHPc35+WCQnMSEpi1vjx1AsIqPkaRUREREREROSqUYAkVTt61AyM0tNh507PcW9vGvfrR+KUKTyelERkaGjN1ygiIiIiIiIiNUIBkpx36hRkZppb1DZt8hy32Yjq3p2xkyYxb/p0YmNiarpCEREREREREbFAnQmQ/vznP/P8889z+PBh2rdvz8svv0z//v2tLst6Z87A4sVmaLR2rdkcu5KQ9u0ZNnEi81JSaNeiRc3XKCIiIiIiIiKWqhMB0jvvvMNDDz3En//8Z2655RbeeOMNhg4dytatW2nWrJnV5dW8oiJYscLcnrZiBZSUeEwJaNmShHHjeGLGDPq0a2dBkSIiIiIiIiJyrbAZhmFYXcTV1qtXL7p27crrr7/uunbTTTcxZswY5s+fX+375uXlERYWRm5uLqHXcZ+fKRs28O6XX2Kkp8PSpXD2rMcc30aN6DtmDLNTU7m9Rw9sNpsFlYqIiIiIiIhITbiUzKPWr0AqLi5m7dq1zJkzx+36kCFDWLZsmUVV1ZycnByeeOIJPl6wACMnx2PcKzKSbiNH8tD06STGxys0EhEREREREREPtT5AOn78OGVlZTRo0MDteoMGDThy5IjH/KKiIoqKily38/LyrnqNV1NwcDDvvvsuRRXCI1twMDfddht3T5vG3cOH4+vra2GFIiIiIiIiInKt87K6gJpSeWWNYRhVrraZP38+YWFhrrfY2NiaKvGq8PX1ZdKkSfgFBtJq6FCe/s9/OJ2dzZb33+f+MWMUHomIiIiIiIjIj6r1PZCKi4upV68e7733HmPHjnVdf/DBB8nKymLhwoVu86tagRQbG3td90A6evQoQUFBBAcHW12KiIiIiIiIiFwjLqUHUq1fgeTn50e3bt345ptv3K5/88039O3b12O+v78/oaGhbm/XuwYNGig8EhEREREREZGfrNb3QAKYNWsWycnJdO/enT59+vDXv/6V/fv3c/fdd1tdmoiIiIiIiIjINa9OBEiTJ0/mxIkTPP300xw+fJgOHTrw+eef07x5c6tLExERERERERG55tX6HkiX61L2A4qIiIiIiIiIXC/UA0lERERERERERK4YBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItBUgiIiIiIiIiIlItH6sLuNYZhgFAXl6exZWIiIiIiIiIiFw557KOc9lHdRQg/Yj8/HwAYmNjLa5EREREREREROTKy8/PJywsrNo5NuNiYqY6zOl0cujQIUJCQrDZbFaX85Pl5eURGxvLgQMHCA0NtbocEcvpOSHiTs8JEXd6Toh40vNCxF1teE4YhkF+fj6NGzfGy6v6LkdagfQjvLy8aNq0qdVlXDGhoaHX7T9skatBzwkRd3pOiLjTc0LEk54XIu6u9+fEj608OkdNtEVEREREREREpFoKkEREREREREREpFoKkOoIf39/nnrqKfz9/a0uReSaoOeEiDs9J0Tc6Tkh4knPCxF3de05oSbaIiIiIiIiIiJSLa1AEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAqgP+/Oc/ExcXR0BAAN26dWPx4sVWlyRy2X79619js9nc3ho2bOgaNwyDX//61zRu3JjAwEAGDRrEli1b3O6jqKiI+++/n/r16xMUFMSoUaP44Ycf3Obk5OSQnJxMWFgYYWFhJCcnc+rUqZp4iCLVWrRoESNHjqRx48bYbDY+/vhjt/GafA7s37+fkSNHEhQURP369XnggQcoLi6+Gg9bpFo/9rxITU31eO3o3bu3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IiLXG/VAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERERERERGRailAEhERkZ8kNTWVMWPGWF3GVbF06VI6duyIr6/vNfEY//nPfxIeHn5J79OiRQtefvllS2sQERGR2kMBkoiIiLhkZmZis9mw2Wx4eXkRFhbGzTffzGOPPcbhw4fd5r7yyiv885//vKj7vd7CplmzZtGlSxf27Nlz0Y+xtps8eTLbt2+3uowqKdwSERG5+hQgiYiIiIfvv/+eQ4cOsXr1ambPns23335Lhw4d2LRpk2tOWFhYrf2hfdeuXdjtdpo2bVrlYzQMg9LS0povzEKBgYHExMRYXcZVVVZWhtPptLoMERGRa5ICJBEREfEQExNDw4YNadOmDVOmTGHp0qVER0czc+ZM15zKq4ref/99OnbsSGBgIFFRUdx6662cOXOGX//61/zrX//ik08+ca1uyszMBGD27Nm0adOGevXq0fL/t3f3QVFWexzAv3sRcGFdQsyNnGKzTUZnMknCYDOnSJZoHMohEB1LKYMmpTJeZGwVmwpxZNikmWY0B8mRWRtF/+BtAQcEUVEwYybIZOPFcIvAJl7WFnTP/cPrM667LHhtbt76fv7a55zzO885z3n+YH579jB7NvR6PcbGxqQ+s7OzsWDBAuzfvx9qtRp+fn5YsWIFhoaGpDZ2ux25ubnQaDTw9vbGww8/jE8++USq7+3tRUJCAvz9/REQEIDY2Fh0dXW5nHdXVxdkMhkGBgaQlJQEmUyGffv2STuzTCYTQkND4e3tjYaGBthsNqSmpmLmzJmYOnUqnnnmGZw9e1bq/iAQuwAACidJREFU79a4kJAQyOVyPP/88+jr60NFRQXm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khL8+uuvmDt3LoAbu5ZaW1tx4cIF9Pf3Y2xsDBqNBj09PTAajTCbzdi1axeOHDlyR+OcOnUqMjMzkZGRga+++gpmsxmnT5/G3r17AQCrVq3CjBkzEBsbi4aGBnR2duL48eN499138dNPP93VM/L19cXbb7+N9PR0VFZWoq2tDevWrYPVasUbb7xxV31PRKPRoKSkBOfPn8e3336LlStXjrvzJzw8HBUVFfjoo4+kA8rfeecdXLlyBYmJiThz5gx+/PFHVFVVISkpySkR81ebM2cOVq1ahddeew0lJSXo7OzE2bNnkZubi/LycgA33q/h4WEcO3YM/f39sFqtk4pzpbOzE1lZWTh16hS6u7tRVVWFH374QXqXiYiI/qnu7a+ciIiI6C8RHBwMmUwGhUKB2bNnIyoqChs3bsQDDzzgsr1SqUR9fT0MBgMGBwcRFBSEvLw8vPjiiwCAdevWoa6uDqGhoRgeHkZtbS1iY2Px/vvvY/369bDZbHjppZeg1+ulf8E+WXq9HlOmTMGWLVtw+fJlBAYGIiUlBcCN83bq6+uRmZmJ5cuXY2hoCLNmzUJkZOSfsiNp+/btsNvtWL16NYaGhhAaGgqTyTTh2U93Kz8/H0lJSYiIiMCMGTOQmZmJwcHBcdtrtVqUlZUhJiYGHh4eSE1NRWNjIzIzM6HT6WCz2RAUFITo6Gj861/33veLhYWF+Pjjj/HBBx+gt7cXAQEBCA8PR0xMDAAgIiICKSkpSEhIwMDAALZu3Yrs7OwJ41zx8fHB999/j6KiIgwMDCAwMBDr169HcnLy/2q6RERE9ySZuPkDfiIiIiIiIiIiIhfuva+YiIiIiIiIiIjonsIEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERucUEEhERERERERERufVvIhJ4D7DWfaEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FIND the last point on the upstream region\n",
    "n_steps = length3/ dx\n",
    "\n",
    "# CREATE empty lists to store the values of points, distance, critical, normal, and water depth, geodetical and piezometric height\n",
    "points_13 = []\n",
    "distance_13 = []\n",
    "geodet_ht_13 = []\n",
    "critcal_dpth_13 = []\n",
    "norml_dpth_13 = []\n",
    "wtr_depth_13 = []\n",
    "piezo_ht_13 = []\n",
    "\n",
    "# CREATE a loop that calculates distance, normal,critical, and water depth, geodetical and piezometric height at each distance step\n",
    "# The point of reference for geodetical height is the river mouth of channel 1\n",
    "# The values are calculated from one distance step after the point of bifurcation\n",
    "# The loop will run for n_steps number of times\n",
    "for i in range (1, int(n_steps + 1)):\n",
    "    \n",
    "    # CALCULATE the distance by multiplying point (i) with distance step\n",
    "    d = dx * i \n",
    "    \n",
    "    # ADD the length of channel 1 i.e. 15000m to get the actual distance of channel 3 from the river mouth\n",
    "    dist = 15000 + d\n",
    "    \n",
    "    # CALCULATE the geodectical heights by mulplying the distance at the point and slope\n",
    "    geo = dist * slope3\n",
    "    \n",
    "    # ADD geodetical height with calulated normal depth to compute the normal depth at a point for an inclined bed\n",
    "    norm = norm_d3 + geo\n",
    "    \n",
    "    # ADD geodetical height with calculated critical depth to compute the critical depth at a point for an inclined bed\n",
    "    crit = crit_d3 + geo\n",
    "    \n",
    "    # CALL the user-defined function back_water to calculate water depth\n",
    "    h3 = back_water(Q3, height3, width3, slope3, dx, i, C)\n",
    "    \n",
    "    # Piezometric height is the sum of geodetical height with water depth\n",
    "    piezo = geo + height3\n",
    "    \n",
    "    # ADD the values to their respective lists\n",
    "    points_13.append(i)\n",
    "    distance_13.append(dist)\n",
    "    geodet_ht_13.append(geo)\n",
    "    critcal_dpth_13.append(crit)\n",
    "    norml_dpth_13.append(norm)\n",
    "    wtr_depth_13.append(3)\n",
    "    piezo_ht_13.append(piezo)\n",
    "    i = i + 1\n",
    "\n",
    "# CHANGE the list to tuple as the lists modify after every run of the cell\n",
    "# ADD the two tuples of Channel 1 and 3 for each category to get the values along the entire channel\n",
    "dist = tuple(distance1) + tuple(distance_13)\n",
    "geo = tuple(geodet_ht1) + tuple(geodet_ht_13)\n",
    "norm = tuple(norml_dpth1) + tuple(norml_dpth_13)\n",
    "crit = tuple(critcal_dpth1) + tuple(critcal_dpth_13)\n",
    "piez = tuple(piezo_ht1) + tuple(piezo_ht_13)\n",
    "\n",
    "# DEFINE size, layout, names, and label for the graph\n",
    "plt.figure(figsize=[14, 6])\n",
    "plt.style.use('default') \n",
    "plt.title(\"Backwater Profile for Channel 1 and 3 \\n\")                  \n",
    "plt.xlabel(\"\\n Distance from lake in meters\")                 \n",
    "plt.ylabel(\"Elevation in meters \\n\")  \n",
    "\n",
    "# DEFINE the style and name for each line, and PLOT the graph\n",
    "plt.plot(dist, geo,  linestyle = '-',  color = 'k',  linewidth = 2.0, label = '$Channel Bottom$')\n",
    "plt.plot(dist, crit, linestyle = '--', color = 'r',  linewidth = 1.5, label = '$Critical Depth$')\n",
    "plt.plot(dist, norm, linestyle = '--', color = 'g',  linewidth = 2.0, label = '$Normal Depth$')\n",
    "plt.plot(dist, piez, linestyle = '-',  color = 'b',  linewidth = 2.0, label = '$Water Surface Elevation$')\n",
    "plt.fill_between(dist, geo, piez, color = 'c')\n",
    "\n",
    "\n",
    "# DISPLAY the graph\n",
    "plt.legend(loc = 5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='profile23'></a>\n",
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B) Plot entire profile of channel 2 and 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### In case of NameError, run these cells in this particular order:\n",
    "\n",
    "<a href='#library'>Python library</a>\n",
    "\n",
    "<a href='#function'>Backwater function</a>\n",
    "\n",
    "<a href='#parameters'>List of parameters</a>\n",
    "\n",
    "<a href='#channel2'>Backwter Curve for Channel 2</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FIND the last point on the upstream region\n",
    "n_steps = length3/ dx\n",
    "\n",
    "# CREATE empty lists to store the values of points, distance, critical, normal water depth, geodetical and piezometric height\n",
    "points_23 = []\n",
    "distance_23 = []\n",
    "geodet_ht_23 = []\n",
    "critcal_dpth_23 = []\n",
    "norml_dpth_23 = []\n",
    "wtr_depth_23 = []\n",
    "piezo_ht_23 = []\n",
    "\n",
    "# CREATE a loop that calculates distance, normal and critical depth, geodetical and piezometric height at each distance step\n",
    "# The point of reference for geodetical height is the river mouth of channel 2\n",
    "# The values are calculated from one distance step after the point of bifurcation\n",
    "# The loop will run for n_steps number of times\n",
    "for i in range (1, int(n_steps + 1)):\n",
    "    \n",
    "    # CALCULATE the distance by multiplying point (i) with distance step\n",
    "    d = dx * i \n",
    "    \n",
    "    # ADD the length of channel 2 i.e. 25000m to get the actual distance of channel 3 from the river mouth\n",
    "    dist = 25000 + d\n",
    "    \n",
    "    # CALCULATE the geodectical heights by mulplying the distance at the point and slope\n",
    "    # Here, the reference point for geodetical heigth is point of bifurcation\n",
    "    # RAISE the caculated geodetical height of channel 3 to the last height of channel 2\n",
    "    geo = round(geodet_ht2[-1], 2) + d * slope3\n",
    "    \n",
    "    # ADD geodetical height with calulated normal depth to compute the normal depth at a point for an inclined bed\n",
    "    norm = norm_d3 + geo\n",
    "    \n",
    "    # ADD geodetical height with calculated critical depth to compute the critical depth at a point for an inclined bed\n",
    "    crit = crit_d3 + geo\n",
    "    \n",
    "    # CALL the user-defined function back_water to calculate water depth\n",
    "    h3 = back_water(Q3, height3, width3, slope3, dx, i, C)\n",
    "    \n",
    "    # Piezometric height is the sum of geodetical height with water depth\n",
    "    piezo = geo + height3\n",
    "    \n",
    "    # ADD the values to their respective lists\n",
    "    points_23.append(i)\n",
    "    distance_23.append(dist)\n",
    "    geodet_ht_23.append(geo)\n",
    "    critcal_dpth_23.append(crit)\n",
    "    norml_dpth_23.append(norm)\n",
    "    wtr_depth_23.append(h3)\n",
    "    piezo_ht_23.append(piezo)\n",
    "    i = i + 1\n",
    "\n",
    "# CHANGE the list to tuple as the lists modify after every run of the cell\n",
    "# ADD the two tuples of Channel 1 and 3 for each category to get the values along the entire channel\n",
    "dist = tuple(distance2) + tuple(distance_23)\n",
    "geo = tuple(geodet_ht2) + tuple(geodet_ht_23)\n",
    "norm = tuple(norml_dpth2) + tuple(norml_dpth_23)\n",
    "crit = tuple(critcal_dpth2) + tuple(critcal_dpth_23)\n",
    "piez = tuple(piezo_ht2) + tuple(piezo_ht_23)\n",
    "\n",
    "\n",
    "# DEFINE size, layout, names, and label for the graph\n",
    "plt.figure(figsize=[14, 6])\n",
    "plt.style.use('default') \n",
    "plt.title(\"Backwater Profile for Channel 2 and 3 \\n\")                  \n",
    "plt.xlabel(\"\\n Distance from lake in meters\")                 \n",
    "plt.ylabel(\"Elevation in meters \\n\")  \n",
    "\n",
    "# DEFINE the style and name for each line, and PLOT the graph\n",
    "plt.plot(dist, geo,  linestyle = '-',  color = 'k',  linewidth = 2.0, label = '$Channel Bottom$')\n",
    "plt.plot(dist, crit, linestyle = '--', color = 'r',  linewidth = 1.5, label = '$Critical Depth$')\n",
    "plt.plot(dist, norm, linestyle = '--', color = 'g',  linewidth = 2.0, label = '$Normal Depth$')\n",
    "plt.plot(dist, piez, linestyle = '-',  color = 'b',  linewidth = 2.0, label = '$Water Surface Elevation$')\n",
    "plt.fill_between(dist, geo, piez, color = 'c')\n",
    "\n",
    "\n",
    "# DISPLAY the graph\n",
    "plt.legend(loc = 5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href='#table'>Go to the Notebook guide</a>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
